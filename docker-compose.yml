version: "3.9"

x-base-service: &base-service
    image: netfoundry/ziti-tunnel:latest # https://hub.docker.com/r/netfoundry/ziti-tunnel/tags?page=1&ordering=last_updated
    volumes:
    - .:/netfoundry          # mount current dir (relative to Compose file) with identity config file
    environment:
    - NF_REG_NAME            # inherit when run like this: NF_REG_NAME=AcmeIdentity docker-compose up ziti-tproxy
    - NF_REG_TOKEN           # a JWT as string to be used for enrolling and persisting /ziti-edge-tunnel/${NF_REG_NAME}.json 
    - PFXLOG_NO_JSON=true    # suppress JSON logging
    network_mode: host       # use the Docker host's network, not the Docker bridge

x-tun-capabilities: &tun-capabilities
    privileged: true

x-iptables-capabilities: &iptables-capabilities
    cap_add:
    - NET_ADMIN              # iptables filter
    - NET_RAW                # iptables mangle

services:
    ziti-tun:                # ip route to tun device transparent interceptor with DNS via systemd-resolved
        <<: *base-service
        <<: *tun-capabilities
        image: docker.io/netfoundry/ziti-edge-tunnel:0.17.14-multi
        devices:
        - /dev/net/tun:/dev/net/tun
        volumes:
        - .:/ziti-edge-tunnel
        - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket
        command: 
        - --verbose=4
        - --dns-ip-range=100.64.64.0/18
    ziti-tun-dir:                # load all identities from current dir
        <<: *base-service
        <<: *tun-capabilities
        image: docker.io/netfoundry/ziti-edge-tunnel:0.17.14-multi # TODO: revert to :latest with 0.17.15 when multi-identity support is merged
        environment: []
        devices:
        - /dev/net/tun:/dev/net/tun
        volumes:
        - .:/ziti-edge-tunnel
        - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket
        command: 
        - --verbose=4
        - --dns-ip-range=100.64.64.0/18
#        - --dns=dnsmasq:/ziti-edge-tunnel/hosts  # alternative to systemd-resolved, assumes Docker host has dnsmasq watching for hosts files in ./hosts
    ziti-tproxy:             # iptables transparent interceptor with DNS
        <<: *base-service
        <<: *iptables-capabilities
        dns:                 # optionally, override DNS inherited from Docker host
        - 127.0.0.1          # this first NS must match the built-in nameserver's bind address,
        - 1.1.1.1            #   and a recursive NS is also needed e.g. 8.8.8.8
        command: 
        - tproxy
        #- --resolver=udp://127.1.2.3:53     # override nameserver bind address (always 53/udp); default is 127.0.0.1
        #- --dnsSvcIpRange=100.64.64.0/18    # override the IP range used for DNS intercepts; default is 100.64/10
    ziti-tproxy-ip:          # iptables transparent interceptor without DNS
        <<: *base-service
        <<: *iptables-capabilities
        command: 
        - tproxy
        - --resolver none
        #- --dnsSvcIpRange=100.64.64.0/18    # override the IP range used for DNS intercepts; default is 100.64/10
    ziti-test:               # docker-compose exec ziti-test bash
        <<: *base-service
        <<: *iptables-capabilities
        entrypoint: ["sh", "-c", "while true; do sleep infinity; done"]
    ziti-host:               # terminate a service for a server that's reachable by the host network
        <<: *base-service
        command: host 
    ziti-bridge:             # terminate a service for a server that's reachable by this Docker network (default mode is "bridge")
        <<: *base-service
        network_mode: bridge
        command: host 
    ziti-proxy:              # bind a named service to a container TCP port, optionally forward host TCP port to container
        <<: *base-service
        ports:
        - "8888:8888"        # optionally forward host ports to container ports listening as TCP proxy
        network_mode: bridge
        command: 
        - proxy
        - '"my example service":8888' # example named service and container port to bind as TCP proxy
