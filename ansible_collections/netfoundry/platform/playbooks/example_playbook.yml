
- hosts: localhost
  collections:
  - netfoundry.platform
  tasks:
  - name: Establish session and find Network resources
    netfoundry_info:
      network: "{{ networkName }}"
      credentials: "{{ credentialsJson }}" 
      inventory: True
    register: netfoundry_info
  - name: show Organization
    debug:
      msg: "{{ netfoundry_info.organization }}"
  - name: show Console URL
    debug:
      msg: "{{ netfoundry_info.console }}"
  - name: list Existing Endpoint names
    debug:
      msg: "NAME: {{ item.name }}"
    loop: "{{ netfoundry_info.endpoints }}"
  - name: list Existing Edge Router names
    debug:
      msg: "NAME: {{ item.name }}"
    loop: "{{ netfoundry_info.edge_routers }}"
  - name: declare Endpoints
    netfoundry_endpoint:
      name: "{{ item }}"
      network: "{{ netfoundry_info.network }}"
      attributes:
      - "#workFromAnywhere"
      dest: /tmp/netfoundry                  # filename is Endpoint name if dest is a directory
      #dest: /tmp/netfoundry/ott-{{item}}.jwt # custom filename if name is like *.jwt
    loop: "{{ endpointNames }}"
    register: endpoints
  - name: print results for changed Endpoints
    debug:
      var: item.message
    loop: "{{endpoints.results}}"
    when: item.changed

  # - name: Delete all Endpoints
  #   netfoundry_endpoint:
  #     name: "{{ item }}"
  #     state: DELETED
  #     network: "{{ netfoundry_info.network }}"
  #   loop: "{{ netfoundry_info.endpoints|map(attribute='name')|list }}"

  - name: declare an Endpoint-hosted Service
    netfoundry_service:
      network: "{{ netfoundry_info.network }}"
      name: HTTP Echo 1
      endpoints: 
      - Exit1
      attributes: 
      - "#welcomeWagon"
      clientHostName: echo1.netfoundry
      clientPortRange: 80
      serverHostName: eth0.me
      serverPortRange: 80
      serverProtocol: TCP

  - name: declare a Router-hosted Service
    netfoundry_service:
      network: "{{ netfoundry_info.network }}"
      name: HTTP Echo 2
      attributes: 
      - "#welcomeWagon"
      clientHostName: echo2.netfoundry
      clientPortRange: 80
      egressRouter: "{{ netfoundry_info.edge_routers.0.name }}"
      serverHostName: eth0.me
      serverPortRange: 80
      serverProtocol: TCP

  - name: delete a Service
    netfoundry_service:
      network: "{{ netfoundry_info.network }}"
      name: HTTPEcho3
      state: DELETED

  vars:
    networkName: kentest1430
    credentialsJson: nfint-ZitiBastions.json # relative to playbook; documentation: https://developer.netfoundry.io/v2/guides/authentication/#get-an-api-account
    endpointNames:
    - Client1
    - Exit1
