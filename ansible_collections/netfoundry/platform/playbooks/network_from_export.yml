---

  # declare entities from a vars dict "embedded" containing the data structure
  # exported / downloaded from the NF console's "manage networks" list of
  # networks
- hosts: localhost
  gather_facts: False
  force_handlers: True
  roles:
    - { role: netfoundry-network, tags: ['netfoundry'] }
  collections:
      - netfoundry.platform
  vars:
    network_basename: Junction
    network_basename_serial: 1639677661

    # download as YAML from NF web console
    network_download:
      networkGroupId: fa080396-8f02-4596-9bf4-d16e1686b4b0
      size: small
      name: "{{ network_basename }}{{ network_basename_serial }}"
      productVersion: 7.3.43
      o365BreakoutCategory: NONE
      locationCode: us-east-1
      edgeRouters:
        - name: customer router {{ network_basename_serial }}
          linkListener: false
          tunnelerEnabled: true
          attributes:
            - '#privateRouters'
        - name: Yellow Hosted {{ network_basename_serial }}
          linkListener: true
          tunnelerEnabled: true
          attributes:
            - '#yellow_routers'
            - '#GCP_routers'
        - name: Cyan Hosted {{ network_basename_serial }}
          linkListener: true
          tunnelerEnabled: true
          attributes:
            - '#cyan_routers'
            - '#OCP_routers'
        - name: Key Hosted {{ network_basename_serial }}
          linkListener: true
          tunnelerEnabled: true
          attributes:
            - '#AWS_routers'
            - '#key_routers'
        - name: Magenta Hosted {{ network_basename_serial }}
          linkListener: true
          tunnelerEnabled: true
          attributes:
            - '#magenta_routers'
            - '#AZURE_routers'
      edgeRouterPolicies:
        - name: magenta ERP {{ network_basename_serial }}
          endpointAttributes:
            - '#magenta_endpoints'
          edgeRouterAttributes:
            - '#yellow_routers'
            - '#magenta_routers'
        - name: cyan endpoints ERP {{ network_basename_serial }}
          endpointAttributes:
            - '#cyan_endpoints'
          edgeRouterAttributes:
            - '#yellow_routers'
            - '#cyan_routers'
      services:
        - name: Yellow Hosted {{ network_basename_serial }} SSH Server
          encryptionRequired: true
          attributes:
            - '#cyan_services'
            - '#kentest_router'
          modelType: TunnelerToEdgeRouter
          model:
            clientIngress:
              host: yellow-hosted.routers.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 22
            edgeRouterAttributes:
              - '#all'
            edgeRouterHosts:
              - edgeRouterName: Yellow Hosted {{ network_basename_serial }}
                serverEgress:
                  protocol: tcp
                  host: localhost
                  port: 22
        - name: Magenta Hosted {{ network_basename_serial }} SSH Server
          encryptionRequired: true
          attributes:
            - '#cyan_services'
          modelType: TunnelerToEdgeRouter
          model:
            clientIngress:
              host: magenta-hosted.routers.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 22
            edgeRouterAttributes:
              - '#all'
            edgeRouterHosts:
              - edgeRouterName: Magenta Hosted {{ network_basename_serial }}
                serverEgress:
                  protocol: tcp
                  host: localhost
                  port: 22
        - name: Endpoint Echo {{ network_basename_serial }}
          encryptionRequired: true
          attributes:
            - '#cyan_services'
            - '#kentest'
          modelType: TunnelerToEndpoint
          model:
            clientIngress:
              host: echo-endpoint.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 80
            serverEgress:
              protocol: tcp
              host: eth0.me
              port: 80
            bindEndpointAttributes:
              - '@Exit{{ network_basename_serial }}'
            edgeRouterAttributes:
              - '#all'
        - name: OpenSpeedtest server {{ network_basename_serial }}
          encryptionRequired: true
          attributes:
            - '#cyan_services'
          modelType: TunnelerToEndpoint
          model:
            clientIngress:
              host: speedtest-endpoint.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 80
            serverEgress:
              protocol: tcp
              host: speedtest
              port: 8080
            bindEndpointAttributes:
              - '@Exit{{ network_basename_serial }}'
            edgeRouterAttributes:
              - '#all'
        - name: echo-{{ network_basename_serial }}-50001
          encryptionRequired: true
          attributes:
            - '#cyan_services'
          modelType: TunnelerToEndpoint
          model:
            clientIngress:
              host: echo-50001.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 50001
            serverEgress:
              protocol: tcp
              host: echo
              port: 50001
            bindEndpointAttributes:
              - '@Exit{{ network_basename_serial }}'
            edgeRouterAttributes:
              - '#all'
        - name: echo-{{ network_basename_serial }}-50003
          encryptionRequired: true
          attributes:
            - '#cyan_services'
          modelType: TunnelerToEndpoint
          model:
            clientIngress:
              host: echo-50003.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 50003
            serverEgress:
              protocol: tcp
              host: echo
              port: 50003
            bindEndpointAttributes:
              - '@Exit{{ network_basename_serial }}'
            edgeRouterAttributes:
              - '#all'
        - name: iperf server {{ network_basename_serial }}
          encryptionRequired: true
          attributes:
            - '#cyan_services'
          modelType: AdvancedTunnelerToEndpoint
          model:
            clientIngress:
              protocols:
                - tcp
                - udp
              addresses:
                - iperf-endpoint.{{ network_basename }}{{ network_basename_serial }}.netfoundry
                - 100.128.0.1
              ports:
                - low: 5201
                  high: 5202
            serverEgress:
              forwardProtocol: true
              allowedProtocols:
                - tcp
                - udp
              host: iperf
              port: 5201
            bindEndpointAttributes:
              - '@Exit{{ network_basename_serial }}'
            edgeRouterAttributes:
              - '#all'
        - name: Go SDK Reflect {{ network_basename_serial }}
          encryptionRequired: true
          attributes:
            - '#cyan_services'
          modelType: TunnelerToSdk
          model:
            clientIngress:
              host: reflect-server.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 194
            bindEndpointAttributes:
              - '@Reflect{{ network_basename_serial }}'
            edgeRouterAttributes:
              - '#all'
        - name: echo-{{ network_basename_serial }}-50004
          encryptionRequired: true
          attributes:
            - '#cyan_services'
          modelType: TunnelerToEndpoint
          model:
            clientIngress:
              host: echo-50004.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 50004
            serverEgress:
              protocol: tcp
              host: echo
              port: 50004
            bindEndpointAttributes:
              - '@Exit{{ network_basename_serial }}'
            edgeRouterAttributes:
              - '#all'
        - name: Key Hosted {{ network_basename_serial }} SSH Server
          encryptionRequired: true
          attributes:
            - '#cyan_services'
          modelType: TunnelerToEdgeRouter
          model:
            clientIngress:
              host: key-hosted.routers.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 22
            edgeRouterAttributes:
              - '#all'
            edgeRouterHosts:
              - edgeRouterName: Key Hosted {{ network_basename_serial }}
                serverEgress:
                  protocol: tcp
                  host: localhost
                  port: 22
        - name: echo-{{ network_basename_serial }}-50002
          encryptionRequired: true
          attributes:
            - '#cyan_services'
          modelType: TunnelerToEndpoint
          model:
            clientIngress:
              host: echo-50002.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 50002
            serverEgress:
              protocol: tcp
              host: echo
              port: 50002
            bindEndpointAttributes:
              - '@Exit{{ network_basename_serial }}'
            edgeRouterAttributes:
              - '#all'
        - name: Cyan Hosted {{ network_basename_serial }} SSH Server
          encryptionRequired: true
          attributes:
            - '#cyan_services'
          modelType: TunnelerToEdgeRouter
          model:
            clientIngress:
              host: cyan-hosted.routers.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 22
            edgeRouterAttributes:
              - '#all'
            edgeRouterHosts:
              - edgeRouterName: Cyan Hosted {{ network_basename_serial }}
                serverEgress:
                  protocol: tcp
                  host: localhost
                  port: 22
        - name: Router Echo {{ network_basename_serial }}
          encryptionRequired: true
          attributes:
            - '#cyan_services'
          modelType: TunnelerToEdgeRouter
          model:
            clientIngress:
              host: echo-router.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 80
            edgeRouterAttributes:
              - '#all'
            edgeRouterHosts:
              - edgeRouterName: Yellow Hosted {{ network_basename_serial }}
                serverEgress:
                  protocol: tcp
                  host: eth0.me
                  port: 80
        - name: echo-{{ network_basename_serial }}-50005
          encryptionRequired: true
          attributes:
            - '#cyan_services'
          modelType: TunnelerToEndpoint
          model:
            clientIngress:
              host: echo-50005.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 50005
            serverEgress:
              protocol: tcp
              host: echo
              port: 50005
            bindEndpointAttributes:
              - '@Exit{{ network_basename_serial }}'
            edgeRouterAttributes:
              - '#all'
        - name: REST test server {{ network_basename_serial }}
          encryptionRequired: true
          attributes:
            - '#cyan_services'
          modelType: TunnelerToEndpoint
          model:
            clientIngress:
              host: httpbin.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 80
            serverEgress:
              protocol: tcp
              host: httpbin
              port: 80
            bindEndpointAttributes:
              - '@Exit{{ network_basename_serial }}'
            edgeRouterAttributes:
              - '#all'
        - name: echo-{{ network_basename_serial }}-50000
          encryptionRequired: true
          attributes:
            - '#cyan_services'
          modelType: TunnelerToEndpoint
          model:
            clientIngress:
              host: echo-50000.{{ network_basename }}{{ network_basename_serial }}.netfoundry
              port: 50000
            serverEgress:
              protocol: tcp
              host: echo
              port: 50000
            bindEndpointAttributes:
              - '@Exit{{ network_basename_serial }}'
            edgeRouterAttributes:
              - '#all'
      certificateAuthorities: []
      endpoints:
        - name: Reflect{{ network_basename_serial }}
          enrollmentMethod:
            ott: true
            updb: null
            ottca: null
          attributes:
            - '#magenta_endpoints'
        - name: client-{{ network_basename_serial }}-1005
          enrollmentMethod:
            ott: true
            updb: null
            ottca: null
          attributes:
            - '#cyan_endpoints'
        - name: Yellow Hosted {{ network_basename_serial }}
          enrollmentMethod:
            ott: true
            updb: null
            ottca: null
          attributes: []
        - name: client-{{ network_basename_serial }}-1004
          enrollmentMethod:
            ott: true
            updb: null
            ottca: null
          attributes:
            - '#cyan_endpoints'
        - name: Cyan Hosted {{ network_basename_serial }}
          enrollmentMethod:
            ott: true
            updb: null
            ottca: null
          attributes: []
        - name: client-{{ network_basename_serial }}-1002
          enrollmentMethod:
            ott: true
            updb: null
            ottca: null
          attributes:
            - '#cyan_endpoints'
        - name: Magenta Hosted {{ network_basename_serial }}
          enrollmentMethod:
            ott: true
            updb: null
            ottca: null
          attributes: []
        - name: client-{{ network_basename_serial }}-1001
          enrollmentMethod:
            ott: true
            updb: null
            ottca: null
          attributes:
            - '#cyan_endpoints'
        - name: customer router {{ network_basename_serial }}
          enrollmentMethod:
            ott: true
            updb: null
            ottca: null
          attributes: []
        - name: client-{{ network_basename_serial }}-1000
          enrollmentMethod:
            ott: true
            updb: null
            ottca: null
          attributes:
            - '#cyan_endpoints'
        - name: Key Hosted {{ network_basename_serial }}
          enrollmentMethod:
            ott: true
            updb: null
            ottca: null
          attributes: []
        - name: Client{{ network_basename_serial }}
          enrollmentMethod:
            ott: true
            updb: null
            ottca: null
          attributes:
            - '#cyan_endpoints'
        - name: client-{{ network_basename_serial }}-1003
          enrollmentMethod:
            ott: true
            updb: null
            ottca: null
          attributes:
            - '#cyan_endpoints'
        - name: Exit{{ network_basename_serial }}
          enrollmentMethod:
            ott: true
            updb: null
            ottca: null
          attributes:
            - '#magenta_endpoints'
      appWans:
        - networkId: null
          name: Welcome {{ network_basename_serial }}
          type: Dial
          semantic: AnyOf
          serviceAttributes:
            - '#cyan_endpoints'
            - '@customer router {{ network_basename_serial }}'
          endpointAttributes:
            - '#cyan_services'
          postureCheckAttributes: []
      postureChecks: []
