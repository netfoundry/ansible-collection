---
name: Publish Collection to Ansible Galaxy and Docker Hub

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.6'

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install yq

    - name: Read version string
      id: read_version
      run: |
        COLLECTION_VERSION=$(yq -r '.version' ./netfoundry.platform/galaxy.yml)
        [[ ${COLLECTION_VERSION} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] || {
          echo "ERROR: unexpected version string '${COLLECTION_VERSION}'" >&2
          exit 1
        }
        echo ::set-output name=collection_version::${COLLECTION_VERSION}

    - name: Compare Release Tag with Collection Version
      env:
        COLLECTION_VERSION: ${{ steps.read_version.outputs.collection_version }}
      run: |
        if [[ ${GITHUB_REF#refs/tags/v} != ${COLLECTION_VERSION} ]]; then
          echo "ERROR: mismatched Git release tag (${GITHUB_REF#refs/tags/v}) and collection version (${COLLECTION_VERSION})." >&2
          exit 1
        fi

    - name: Append 'latest' tag if release published
      env:
        GITHUB_EVENT_ACTION: ${{ github.event.action }}
        COLLECTION_VERSION: ${{ steps.read_version.outputs.collection_version }}
      id: compose_tags
      run: |
        CONTAINER_TAGS="netfoundry/ansible:${COLLECTION_VERSION}"
        if [[ ${GITHUB_EVENT_ACTION} == published ]]; then
          CONTAINER_TAGS+=",netfoundry/ansible:latest"
        fi
        echo GITHUB_EVENT_ACTION="${GITHUB_EVENT_ACTION}"
        echo CONTAINER_TAGS="${CONTAINER_TAGS}"
        echo ::set-output name=container_tags::${CONTAINER_TAGS}

    - name: Build Collection and Publish to Galaxy
      #uses: docker://ghcr.io/artis3n/ansible_galaxy_collection@v2.4.2
      uses: artis3n/ansible_galaxy_collection@v2
      with:
        api_key: '${{ secrets.GALAXY_API_KEY }}'
        collection_dir: 'netfoundry.platform'
        publish: true

    - name: Set up QEMU
      uses: docker/setup-qemu-action@master
      with:
        platforms: amd64,arm,arm64

    - name: Set up Docker BuildKit
      id: buildx
      uses: docker/setup-buildx-action@master

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_API_USER }}
        password: ${{ secrets.DOCKER_HUB_API_TOKEN }}

    - name: Build & Push Multi-Platform Container Image to Hub
      uses: docker/build-push-action@v2
      with:
        context: . # build context is workspace
        builder: ${{ steps.buildx.outputs.name }}
        build-args: | 
          collection_version=${{ steps.read_version.outputs.collection_version }}
        platforms: linux/amd64,linux/arm/v7,linux/arm64
        push: true
        tags: ${{ steps.compose_tags.outputs.container_tags }}