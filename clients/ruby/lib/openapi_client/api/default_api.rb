=begin
#untitled API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 5227

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get an Edge Router
    # @param edge_router_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20012]
    def request4_q1q_u3c4dk(edge_router_id, opts = {})
      data, _status_code, _headers = request4_q1q_u3c4dk_with_http_info(edge_router_id, opts)
      data
    end

    # Get an Edge Router
    # @param edge_router_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20012, Integer, Hash)>] InlineResponse20012 data, response status code and response headers
    def request4_q1q_u3c4dk_with_http_info(edge_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request4_q1q_u3c4dk ...'
      end
      # verify the required parameter 'edge_router_id' is set
      if @api_client.config.client_side_validation && edge_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_router_id' when calling DefaultApi.request4_q1q_u3c4dk"
      end
      # resource path
      local_var_path = '/core/v2/edge-routers/{edgeRouterId}'.sub('{' + 'edgeRouterId' + '}', CGI.escape(edge_router_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20012' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request4_q1q_u3c4dk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject5] :inline_object5 
    # @return [InlineResponse2008]
    def request9s_du_piz_ciu(opts = {})
      data, _status_code, _headers = request9s_du_piz_ciu_with_http_info(opts)
      data
    end

    # Create an Endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject5] :inline_object5 
    # @return [Array<(InlineResponse2008, Integer, Hash)>] InlineResponse2008 data, response status code and response headers
    def request9s_du_piz_ciu_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request9s_du_piz_ciu ...'
      end
      # resource path
      local_var_path = '/core/v2/endpoints'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'inline_object5']) 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2008' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request9s_du_piz_ciu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of Network product versions
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20019]
    def request_a8syya_p_znw(opts = {})
      data, _status_code, _headers = request_a8syya_p_znw_with_http_info(opts)
      data
    end

    # Get the list of Network product versions
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20019, Integer, Hash)>] InlineResponse20019 data, response status code and response headers
    def request_a8syya_p_znw_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_a8syya_p_znw ...'
      end
      # resource path
      local_var_path = '/product-metadata/v2/download-urls.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20019' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_a8syya_p_znw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the registration information for an Edge Router
    # @param edge_router_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2009]
    def request_auar_cs_ihk_j(edge_router_id, opts = {})
      data, _status_code, _headers = request_auar_cs_ihk_j_with_http_info(edge_router_id, opts)
      data
    end

    # Get the registration information for an Edge Router
    # @param edge_router_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2009, Integer, Hash)>] InlineResponse2009 data, response status code and response headers
    def request_auar_cs_ihk_j_with_http_info(edge_router_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_auar_cs_ihk_j ...'
      end
      # verify the required parameter 'edge_router_id' is set
      if @api_client.config.client_side_validation && edge_router_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_router_id' when calling DefaultApi.request_auar_cs_ihk_j"
      end
      # resource path
      local_var_path = '/core/v2/edge-routers/{edgeRouterId}/registration-key'.sub('{' + 'edgeRouterId' + '}', CGI.escape(edge_router_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2009' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_auar_cs_ihk_j\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Endpoint
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2007]
    def request_ay_fh_a_qd5pn(opts = {})
      data, _status_code, _headers = request_ay_fh_a_qd5pn_with_http_info(opts)
      data
    end

    # Get an Endpoint
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2007, Integer, Hash)>] InlineResponse2007 data, response status code and response headers
    def request_ay_fh_a_qd5pn_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_ay_fh_a_qd5pn ...'
      end
      # resource path
      local_var_path = '/core/v2/endpoints'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2007' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_ay_fh_a_qd5pn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Edge Router Policy
    # @param edge_router_policy_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004EmbeddedEdgeRouterPolicyList]
    def request_btgg9_zl_c0e(edge_router_policy_id, opts = {})
      data, _status_code, _headers = request_btgg9_zl_c0e_with_http_info(edge_router_policy_id, opts)
      data
    end

    # Get an Edge Router Policy
    # @param edge_router_policy_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004EmbeddedEdgeRouterPolicyList, Integer, Hash)>] InlineResponse2004EmbeddedEdgeRouterPolicyList data, response status code and response headers
    def request_btgg9_zl_c0e_with_http_info(edge_router_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_btgg9_zl_c0e ...'
      end
      # verify the required parameter 'edge_router_policy_id' is set
      if @api_client.config.client_side_validation && edge_router_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'edge_router_policy_id' when calling DefaultApi.request_btgg9_zl_c0e"
      end
      # resource path
      local_var_path = '/core/v2/edge-router-policies/{edgeRouterPolicyId}'.sub('{' + 'edgeRouterPolicyId' + '}', CGI.escape(edge_router_policy_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2004EmbeddedEdgeRouterPolicyList' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_btgg9_zl_c0e\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of Services
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def request_e1_iex_rfv_zg(opts = {})
      data, _status_code, _headers = request_e1_iex_rfv_zg_with_http_info(opts)
      data
    end

    # Get the list of Services
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Integer, Hash)>] InlineResponse2003 data, response status code and response headers
    def request_e1_iex_rfv_zg_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_e1_iex_rfv_zg ...'
      end
      # resource path
      local_var_path = '/core/v2/services'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2003' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_e1_iex_rfv_zg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Network
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject] :inline_object 
    # @return [InlineResponse202]
    def request_f_wl_fmqidpx(opts = {})
      data, _status_code, _headers = request_f_wl_fmqidpx_with_http_info(opts)
      data
    end

    # Create a Network
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject] :inline_object 
    # @return [Array<(InlineResponse202, Integer, Hash)>] InlineResponse202 data, response status code and response headers
    def request_f_wl_fmqidpx_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_f_wl_fmqidpx ...'
      end
      # resource path
      local_var_path = '/core/v2/networks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'inline_object']) 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse202' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_f_wl_fmqidpx\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of AppWANs
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2006]
    def request_gij_vc_eo_ml_m(opts = {})
      data, _status_code, _headers = request_gij_vc_eo_ml_m_with_http_info(opts)
      data
    end

    # Get the list of AppWANs
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2006, Integer, Hash)>] InlineResponse2006 data, response status code and response headers
    def request_gij_vc_eo_ml_m_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_gij_vc_eo_ml_m ...'
      end
      # resource path
      local_var_path = '/core/v2/app-wans'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2006' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_gij_vc_eo_ml_m\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Edge Router Policy
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def request_hp1b9_gi_lax(opts = {})
      data, _status_code, _headers = request_hp1b9_gi_lax_with_http_info(opts)
      data
    end

    # Get an Edge Router Policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Integer, Hash)>] InlineResponse2004 data, response status code and response headers
    def request_hp1b9_gi_lax_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_hp1b9_gi_lax ...'
      end
      # resource path
      local_var_path = '/core/v2/edge-router-policies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2004' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_hp1b9_gi_lax\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Network
    # @param network_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2024]
    def request_iaj_vi_y_lviu(network_id, opts = {})
      data, _status_code, _headers = request_iaj_vi_y_lviu_with_http_info(network_id, opts)
      data
    end

    # Delete a Network
    # @param network_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2024, Integer, Hash)>] InlineResponse2024 data, response status code and response headers
    def request_iaj_vi_y_lviu_with_http_info(network_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_iaj_vi_y_lviu ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling DefaultApi.request_iaj_vi_y_lviu"
      end
      # resource path
      local_var_path = '/core/v2/networks/{networkId}'.sub('{' + 'networkId' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2024' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_iaj_vi_y_lviu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of Network Groups
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20017]
    def request_k9aj_dj8v_us(opts = {})
      data, _status_code, _headers = request_k9aj_dj8v_us_with_http_info(opts)
      data
    end

    # Get the list of Network Groups
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20017, Integer, Hash)>] InlineResponse20017 data, response status code and response headers
    def request_k9aj_dj8v_us_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_k9aj_dj8v_us ...'
      end
      # resource path
      local_var_path = '/rest/v1/network-groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20017' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_k9aj_dj8v_us\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an AppWAN
    # @param app_wan_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def request_kke_r9g_ny25(app_wan_id, opts = {})
      data, _status_code, _headers = request_kke_r9g_ny25_with_http_info(app_wan_id, opts)
      data
    end

    # Get an AppWAN
    # @param app_wan_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def request_kke_r9g_ny25_with_http_info(app_wan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_kke_r9g_ny25 ...'
      end
      # verify the required parameter 'app_wan_id' is set
      if @api_client.config.client_side_validation && app_wan_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_wan_id' when calling DefaultApi.request_kke_r9g_ny25"
      end
      # resource path
      local_var_path = '/core/v2/app-wans/{appWanId}'.sub('{' + 'appWanId' + '}', CGI.escape(app_wan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse200' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_kke_r9g_ny25\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Edge Router Policy
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject2] :inline_object2 
    # @return [InlineResponse2004EmbeddedEdgeRouterPolicyList]
    def request_lg_kx_u4ph9t(opts = {})
      data, _status_code, _headers = request_lg_kx_u4ph9t_with_http_info(opts)
      data
    end

    # Create an Edge Router Policy
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject2] :inline_object2 
    # @return [Array<(InlineResponse2004EmbeddedEdgeRouterPolicyList, Integer, Hash)>] InlineResponse2004EmbeddedEdgeRouterPolicyList data, response status code and response headers
    def request_lg_kx_u4ph9t_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_lg_kx_u4ph9t ...'
      end
      # resource path
      local_var_path = '/core/v2/edge-router-policies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'inline_object2']) 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2004EmbeddedEdgeRouterPolicyList' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_lg_kx_u4ph9t\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Network Configuration profile
    # e.g. small, medium, large
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20015]
    def request_lo_xf_q_ss8_ge(opts = {})
      data, _status_code, _headers = request_lo_xf_q_ss8_ge_with_http_info(opts)
      data
    end

    # Get a Network Configuration profile
    # e.g. small, medium, large
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20015, Integer, Hash)>] InlineResponse20015 data, response status code and response headers
    def request_lo_xf_q_ss8_ge_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_lo_xf_q_ss8_ge ...'
      end
      # resource path
      local_var_path = '/core/v2/network-configs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20015' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_lo_xf_q_ss8_ge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Service
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject1] :inline_object1 
    # @return [InlineResponse2021]
    def request_lopo_ftq4ih(opts = {})
      data, _status_code, _headers = request_lopo_ftq4ih_with_http_info(opts)
      data
    end

    # Create a Service
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject1] :inline_object1 
    # @return [Array<(InlineResponse2021, Integer, Hash)>] InlineResponse2021 data, response status code and response headers
    def request_lopo_ftq4ih_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_lopo_ftq4ih ...'
      end
      # resource path
      local_var_path = '/core/v2/services'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'inline_object1']) 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2021' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_lopo_ftq4ih\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the identity of the caller's API account
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20016]
    def request_mpy_yt_ii_s6x(opts = {})
      data, _status_code, _headers = request_mpy_yt_ii_s6x_with_http_info(opts)
      data
    end

    # Get the identity of the caller&#39;s API account
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20016, Integer, Hash)>] InlineResponse20016 data, response status code and response headers
    def request_mpy_yt_ii_s6x_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_mpy_yt_ii_s6x ...'
      end
      # resource path
      local_var_path = '/identity/v1/api-account-identities/self'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20016' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_mpy_yt_ii_s6x\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Organization
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20014]
    def request_n6_gjg_plo4v(organization_id, opts = {})
      data, _status_code, _headers = request_n6_gjg_plo4v_with_http_info(organization_id, opts)
      data
    end

    # Get an Organization
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20014, Integer, Hash)>] InlineResponse20014 data, response status code and response headers
    def request_n6_gjg_plo4v_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_n6_gjg_plo4v ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling DefaultApi.request_n6_gjg_plo4v"
      end
      # resource path
      local_var_path = '/identity/v1/organizations/{organizationId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20014' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_n6_gjg_plo4v\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an AppWAN
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject4] :inline_object4 
    # @return [InlineResponse200]
    def request_n_xo_v6_k2f0_q(opts = {})
      data, _status_code, _headers = request_n_xo_v6_k2f0_q_with_http_info(opts)
      data
    end

    # Create an AppWAN
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject4] :inline_object4 
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def request_n_xo_v6_k2f0_q_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_n_xo_v6_k2f0_q ...'
      end
      # resource path
      local_var_path = '/core/v2/app-wans'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'inline_object4']) 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse200' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_n_xo_v6_k2f0_q\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of Networks
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def request_oi_i_af_x2_v_us(opts = {})
      data, _status_code, _headers = request_oi_i_af_x2_v_us_with_http_info(opts)
      data
    end

    # Get the list of Networks
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def request_oi_i_af_x2_v_us_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_oi_i_af_x2_v_us ...'
      end
      # resource path
      local_var_path = '/core/v2/networks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2001' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_oi_i_af_x2_v_us\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Service
    # @param service_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2022]
    def request_p_baai_o3_b0d(service_id, opts = {})
      data, _status_code, _headers = request_p_baai_o3_b0d_with_http_info(service_id, opts)
      data
    end

    # Delete a Service
    # @param service_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2022, Integer, Hash)>] InlineResponse2022 data, response status code and response headers
    def request_p_baai_o3_b0d_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_p_baai_o3_b0d ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling DefaultApi.request_p_baai_o3_b0d"
      end
      # resource path
      local_var_path = '/core/v2/services/{serviceId}'.sub('{' + 'serviceId' + '}', CGI.escape(service_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2022' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_p_baai_o3_b0d\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Edge Router
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject6] :inline_object6 
    # @return [InlineResponse2025]
    def request_py_r6a_up5mi(opts = {})
      data, _status_code, _headers = request_py_r6a_up5mi_with_http_info(opts)
      data
    end

    # Create an Edge Router
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject6] :inline_object6 
    # @return [Array<(InlineResponse2025, Integer, Hash)>] InlineResponse2025 data, response status code and response headers
    def request_py_r6a_up5mi_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_py_r6a_up5mi ...'
      end
      # resource path
      local_var_path = '/core/v2/edge-routers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'inline_object6']) 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2025' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_py_r6a_up5mi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of Posture Checks
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20010]
    def request_q0b3cb_dw8_s(opts = {})
      data, _status_code, _headers = request_q0b3cb_dw8_s_with_http_info(opts)
      data
    end

    # Get the list of Posture Checks
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20010, Integer, Hash)>] InlineResponse20010 data, response status code and response headers
    def request_q0b3cb_dw8_s_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_q0b3cb_dw8_s ...'
      end
      # resource path
      local_var_path = '/core/v2/posture-checks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20010' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_q0b3cb_dw8_s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Network
    # @param network_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20013]
    def request_teq_m_ge_er5_f(network_id, opts = {})
      data, _status_code, _headers = request_teq_m_ge_er5_f_with_http_info(network_id, opts)
      data
    end

    # Get a Network
    # @param network_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20013, Integer, Hash)>] InlineResponse20013 data, response status code and response headers
    def request_teq_m_ge_er5_f_with_http_info(network_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_teq_m_ge_er5_f ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling DefaultApi.request_teq_m_ge_er5_f"
      end
      # resource path
      local_var_path = '/core/v2/networks/{networkId}'.sub('{' + 'networkId' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20013' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_teq_m_ge_er5_f\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Endpoint
    # @param endpoint_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2007EmbeddedEndpointList]
    def request_tsyuwl_aej_k(endpoint_id, opts = {})
      data, _status_code, _headers = request_tsyuwl_aej_k_with_http_info(endpoint_id, opts)
      data
    end

    # Get an Endpoint
    # @param endpoint_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2007EmbeddedEndpointList, Integer, Hash)>] InlineResponse2007EmbeddedEndpointList data, response status code and response headers
    def request_tsyuwl_aej_k_with_http_info(endpoint_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_tsyuwl_aej_k ...'
      end
      # verify the required parameter 'endpoint_id' is set
      if @api_client.config.client_side_validation && endpoint_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_id' when calling DefaultApi.request_tsyuwl_aej_k"
      end
      # resource path
      local_var_path = '/core/v2/endpoints/{endpointId}'.sub('{' + 'endpointId' + '}', CGI.escape(endpoint_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2007EmbeddedEndpointList' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_tsyuwl_aej_k\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change some properties of a Service
    # @param service_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject3] :inline_object3 
    # @return [InlineResponse2023]
    def request_v_iz_b1k6_uqb(service_id, opts = {})
      data, _status_code, _headers = request_v_iz_b1k6_uqb_with_http_info(service_id, opts)
      data
    end

    # Change some properties of a Service
    # @param service_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject3] :inline_object3 
    # @return [Array<(InlineResponse2023, Integer, Hash)>] InlineResponse2023 data, response status code and response headers
    def request_v_iz_b1k6_uqb_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_v_iz_b1k6_uqb ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling DefaultApi.request_v_iz_b1k6_uqb"
      end
      # resource path
      local_var_path = '/core/v2/services/{serviceId}'.sub('{' + 'serviceId' + '}', CGI.escape(service_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'inline_object3']) 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2023' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_v_iz_b1k6_uqb\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Network Group
    # @param network_group_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20011]
    def request_ve_jcbur9i_o(network_group_id, opts = {})
      data, _status_code, _headers = request_ve_jcbur9i_o_with_http_info(network_group_id, opts)
      data
    end

    # Get a Network Group
    # @param network_group_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20011, Integer, Hash)>] InlineResponse20011 data, response status code and response headers
    def request_ve_jcbur9i_o_with_http_info(network_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_ve_jcbur9i_o ...'
      end
      # verify the required parameter 'network_group_id' is set
      if @api_client.config.client_side_validation && network_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_group_id' when calling DefaultApi.request_ve_jcbur9i_o"
      end
      # resource path
      local_var_path = '/rest/v1/network-groups/{networkGroupId}'.sub('{' + 'networkGroupId' + '}', CGI.escape(network_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20011' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_ve_jcbur9i_o\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of data centers
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def request_vfua_d_me_trp(opts = {})
      data, _status_code, _headers = request_vfua_d_me_trp_with_http_info(opts)
      data
    end

    # Get the list of data centers
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def request_vfua_d_me_trp_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_vfua_d_me_trp ...'
      end
      # resource path
      local_var_path = '/core/v2/data-centers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2002' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_vfua_d_me_trp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Service
    # @param service_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def request_y_lsf4m9_ttt(service_id, opts = {})
      data, _status_code, _headers = request_y_lsf4m9_ttt_with_http_info(service_id, opts)
      data
    end

    # Get a Service
    # @param service_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def request_y_lsf4m9_ttt_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_y_lsf4m9_ttt ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling DefaultApi.request_y_lsf4m9_ttt"
      end
      # resource path
      local_var_path = '/core/v2/services/{serviceId}'.sub('{' + 'serviceId' + '}', CGI.escape(service_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2005' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_y_lsf4m9_ttt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Edge Router
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20018]
    def request_yhz_d_aw1_ks4(opts = {})
      data, _status_code, _headers = request_yhz_d_aw1_ks4_with_http_info(opts)
      data
    end

    # Get an Edge Router
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20018, Integer, Hash)>] InlineResponse20018 data, response status code and response headers
    def request_yhz_d_aw1_ks4_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.request_yhz_d_aw1_ks4 ...'
      end
      # resource path
      local_var_path = '/core/v2/edge-routers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse20018' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#request_yhz_d_aw1_ks4\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
