=begin
#untitled API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 5229

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module OpenapiClient
  class InlineResponse2024Links
    attr_accessor :services

    attr_accessor :process_execution

    attr_accessor :networks

    attr_accessor :app_wans

    attr_accessor :endpoints

    attr_accessor :certificate_authorities

    attr_accessor :_self

    attr_accessor :process_executions

    attr_accessor :network_controllers

    attr_accessor :posture_checks

    attr_accessor :edge_routers

    attr_accessor :edge_router_policies

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'services' => :'services',
        :'process_execution' => :'process-execution',
        :'networks' => :'networks',
        :'app_wans' => :'app-wans',
        :'endpoints' => :'endpoints',
        :'certificate_authorities' => :'certificate-authorities',
        :'_self' => :'self',
        :'process_executions' => :'process-executions',
        :'network_controllers' => :'network-controllers',
        :'posture_checks' => :'posture-checks',
        :'edge_routers' => :'edge-routers',
        :'edge_router_policies' => :'edge-router-policies'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'services' => :'InlineResponse200LinksSelf',
        :'process_execution' => :'InlineResponse200LinksNetwork',
        :'networks' => :'InlineResponse200LinksNetwork',
        :'app_wans' => :'InlineResponse200LinksSelf',
        :'endpoints' => :'InlineResponse200LinksSelf',
        :'certificate_authorities' => :'InlineResponse200LinksSelf',
        :'_self' => :'InlineResponse200LinksSelf',
        :'process_executions' => :'InlineResponse200LinksNetwork',
        :'network_controllers' => :'InlineResponse200LinksSelf',
        :'posture_checks' => :'InlineResponse200LinksSelf',
        :'edge_routers' => :'InlineResponse200LinksSelf',
        :'edge_router_policies' => :'InlineResponse200LinksSelf'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::InlineResponse2024Links` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::InlineResponse2024Links`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'services')
        self.services = attributes[:'services']
      end

      if attributes.key?(:'process_execution')
        self.process_execution = attributes[:'process_execution']
      end

      if attributes.key?(:'networks')
        self.networks = attributes[:'networks']
      end

      if attributes.key?(:'app_wans')
        self.app_wans = attributes[:'app_wans']
      end

      if attributes.key?(:'endpoints')
        self.endpoints = attributes[:'endpoints']
      end

      if attributes.key?(:'certificate_authorities')
        self.certificate_authorities = attributes[:'certificate_authorities']
      end

      if attributes.key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.key?(:'process_executions')
        self.process_executions = attributes[:'process_executions']
      end

      if attributes.key?(:'network_controllers')
        self.network_controllers = attributes[:'network_controllers']
      end

      if attributes.key?(:'posture_checks')
        self.posture_checks = attributes[:'posture_checks']
      end

      if attributes.key?(:'edge_routers')
        self.edge_routers = attributes[:'edge_routers']
      end

      if attributes.key?(:'edge_router_policies')
        self.edge_router_policies = attributes[:'edge_router_policies']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @services.nil?
        invalid_properties.push('invalid value for "services", services cannot be nil.')
      end

      if @process_execution.nil?
        invalid_properties.push('invalid value for "process_execution", process_execution cannot be nil.')
      end

      if @networks.nil?
        invalid_properties.push('invalid value for "networks", networks cannot be nil.')
      end

      if @app_wans.nil?
        invalid_properties.push('invalid value for "app_wans", app_wans cannot be nil.')
      end

      if @endpoints.nil?
        invalid_properties.push('invalid value for "endpoints", endpoints cannot be nil.')
      end

      if @certificate_authorities.nil?
        invalid_properties.push('invalid value for "certificate_authorities", certificate_authorities cannot be nil.')
      end

      if @_self.nil?
        invalid_properties.push('invalid value for "_self", _self cannot be nil.')
      end

      if @process_executions.nil?
        invalid_properties.push('invalid value for "process_executions", process_executions cannot be nil.')
      end

      if @network_controllers.nil?
        invalid_properties.push('invalid value for "network_controllers", network_controllers cannot be nil.')
      end

      if @posture_checks.nil?
        invalid_properties.push('invalid value for "posture_checks", posture_checks cannot be nil.')
      end

      if @edge_routers.nil?
        invalid_properties.push('invalid value for "edge_routers", edge_routers cannot be nil.')
      end

      if @edge_router_policies.nil?
        invalid_properties.push('invalid value for "edge_router_policies", edge_router_policies cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @services.nil?
      return false if @process_execution.nil?
      return false if @networks.nil?
      return false if @app_wans.nil?
      return false if @endpoints.nil?
      return false if @certificate_authorities.nil?
      return false if @_self.nil?
      return false if @process_executions.nil?
      return false if @network_controllers.nil?
      return false if @posture_checks.nil?
      return false if @edge_routers.nil?
      return false if @edge_router_policies.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          services == o.services &&
          process_execution == o.process_execution &&
          networks == o.networks &&
          app_wans == o.app_wans &&
          endpoints == o.endpoints &&
          certificate_authorities == o.certificate_authorities &&
          _self == o._self &&
          process_executions == o.process_executions &&
          network_controllers == o.network_controllers &&
          posture_checks == o.posture_checks &&
          edge_routers == o.edge_routers &&
          edge_router_policies == o.edge_router_policies
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [services, process_execution, networks, app_wans, endpoints, certificate_authorities, _self, process_executions, network_controllers, posture_checks, edge_routers, edge_router_policies].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
