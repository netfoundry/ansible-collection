=begin
#untitled API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 5170

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module OpenapiClient
  class InlineResponse20012
    attr_accessor :deleted_at

    attr_accessor :network_id

    attr_accessor :name

    attr_accessor :updated_at

    attr_accessor :provider

    attr_accessor :online

    attr_accessor :ziti_id

    attr_accessor :user_data

    attr_accessor :owner_identity_id

    attr_accessor :attributes

    attr_accessor :provider_id

    attr_accessor :jwt

    attr_accessor :id

    attr_accessor :ip_address

    attr_accessor :status

    attr_accessor :host_id

    attr_accessor :created_at

    attr_accessor :created_by

    attr_accessor :deleted_by

    attr_accessor :location_metadata_id

    attr_accessor :link_listener

    attr_accessor :data_center_id

    attr_accessor :verified

    attr_accessor :_links

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'deleted_at' => :'deletedAt',
        :'network_id' => :'networkId',
        :'name' => :'name',
        :'updated_at' => :'updatedAt',
        :'provider' => :'provider',
        :'online' => :'online',
        :'ziti_id' => :'zitiId',
        :'user_data' => :'userData',
        :'owner_identity_id' => :'ownerIdentityId',
        :'attributes' => :'attributes',
        :'provider_id' => :'providerId',
        :'jwt' => :'jwt',
        :'id' => :'id',
        :'ip_address' => :'ipAddress',
        :'status' => :'status',
        :'host_id' => :'hostId',
        :'created_at' => :'createdAt',
        :'created_by' => :'createdBy',
        :'deleted_by' => :'deletedBy',
        :'location_metadata_id' => :'locationMetadataId',
        :'link_listener' => :'linkListener',
        :'data_center_id' => :'dataCenterId',
        :'verified' => :'verified',
        :'_links' => :'_links'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'deleted_at' => :'AnyType',
        :'network_id' => :'String',
        :'name' => :'String',
        :'updated_at' => :'String',
        :'provider' => :'AnyType',
        :'online' => :'Boolean',
        :'ziti_id' => :'String',
        :'user_data' => :'AnyType',
        :'owner_identity_id' => :'String',
        :'attributes' => :'Array<String>',
        :'provider_id' => :'AnyType',
        :'jwt' => :'AnyType',
        :'id' => :'String',
        :'ip_address' => :'AnyType',
        :'status' => :'String',
        :'host_id' => :'AnyType',
        :'created_at' => :'String',
        :'created_by' => :'String',
        :'deleted_by' => :'AnyType',
        :'location_metadata_id' => :'AnyType',
        :'link_listener' => :'Boolean',
        :'data_center_id' => :'AnyType',
        :'verified' => :'Boolean',
        :'_links' => :'InlineResponse200Links'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::InlineResponse20012` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::InlineResponse20012`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'deleted_at')
        self.deleted_at = attributes[:'deleted_at']
      end

      if attributes.key?(:'network_id')
        self.network_id = attributes[:'network_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'provider')
        self.provider = attributes[:'provider']
      end

      if attributes.key?(:'online')
        self.online = attributes[:'online']
      end

      if attributes.key?(:'ziti_id')
        self.ziti_id = attributes[:'ziti_id']
      end

      if attributes.key?(:'user_data')
        self.user_data = attributes[:'user_data']
      end

      if attributes.key?(:'owner_identity_id')
        self.owner_identity_id = attributes[:'owner_identity_id']
      end

      if attributes.key?(:'attributes')
        if (value = attributes[:'attributes']).is_a?(Array)
          self.attributes = value
        end
      end

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      end

      if attributes.key?(:'jwt')
        self.jwt = attributes[:'jwt']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'ip_address')
        self.ip_address = attributes[:'ip_address']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'host_id')
        self.host_id = attributes[:'host_id']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'deleted_by')
        self.deleted_by = attributes[:'deleted_by']
      end

      if attributes.key?(:'location_metadata_id')
        self.location_metadata_id = attributes[:'location_metadata_id']
      end

      if attributes.key?(:'link_listener')
        self.link_listener = attributes[:'link_listener']
      end

      if attributes.key?(:'data_center_id')
        self.data_center_id = attributes[:'data_center_id']
      end

      if attributes.key?(:'verified')
        self.verified = attributes[:'verified']
      end

      if attributes.key?(:'_links')
        self._links = attributes[:'_links']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @deleted_at.nil?
        invalid_properties.push('invalid value for "deleted_at", deleted_at cannot be nil.')
      end

      if @network_id.nil?
        invalid_properties.push('invalid value for "network_id", network_id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @provider.nil?
        invalid_properties.push('invalid value for "provider", provider cannot be nil.')
      end

      if @online.nil?
        invalid_properties.push('invalid value for "online", online cannot be nil.')
      end

      if @ziti_id.nil?
        invalid_properties.push('invalid value for "ziti_id", ziti_id cannot be nil.')
      end

      if @user_data.nil?
        invalid_properties.push('invalid value for "user_data", user_data cannot be nil.')
      end

      if @owner_identity_id.nil?
        invalid_properties.push('invalid value for "owner_identity_id", owner_identity_id cannot be nil.')
      end

      if @attributes.nil?
        invalid_properties.push('invalid value for "attributes", attributes cannot be nil.')
      end

      if @provider_id.nil?
        invalid_properties.push('invalid value for "provider_id", provider_id cannot be nil.')
      end

      if @jwt.nil?
        invalid_properties.push('invalid value for "jwt", jwt cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @ip_address.nil?
        invalid_properties.push('invalid value for "ip_address", ip_address cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @host_id.nil?
        invalid_properties.push('invalid value for "host_id", host_id cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @created_by.nil?
        invalid_properties.push('invalid value for "created_by", created_by cannot be nil.')
      end

      if @deleted_by.nil?
        invalid_properties.push('invalid value for "deleted_by", deleted_by cannot be nil.')
      end

      if @location_metadata_id.nil?
        invalid_properties.push('invalid value for "location_metadata_id", location_metadata_id cannot be nil.')
      end

      if @link_listener.nil?
        invalid_properties.push('invalid value for "link_listener", link_listener cannot be nil.')
      end

      if @data_center_id.nil?
        invalid_properties.push('invalid value for "data_center_id", data_center_id cannot be nil.')
      end

      if @verified.nil?
        invalid_properties.push('invalid value for "verified", verified cannot be nil.')
      end

      if @_links.nil?
        invalid_properties.push('invalid value for "_links", _links cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @deleted_at.nil?
      return false if @network_id.nil?
      return false if @name.nil?
      return false if @updated_at.nil?
      return false if @provider.nil?
      return false if @online.nil?
      return false if @ziti_id.nil?
      return false if @user_data.nil?
      return false if @owner_identity_id.nil?
      return false if @attributes.nil?
      return false if @provider_id.nil?
      return false if @jwt.nil?
      return false if @id.nil?
      return false if @ip_address.nil?
      return false if @status.nil?
      return false if @host_id.nil?
      return false if @created_at.nil?
      return false if @created_by.nil?
      return false if @deleted_by.nil?
      return false if @location_metadata_id.nil?
      return false if @link_listener.nil?
      return false if @data_center_id.nil?
      return false if @verified.nil?
      return false if @_links.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          deleted_at == o.deleted_at &&
          network_id == o.network_id &&
          name == o.name &&
          updated_at == o.updated_at &&
          provider == o.provider &&
          online == o.online &&
          ziti_id == o.ziti_id &&
          user_data == o.user_data &&
          owner_identity_id == o.owner_identity_id &&
          attributes == o.attributes &&
          provider_id == o.provider_id &&
          jwt == o.jwt &&
          id == o.id &&
          ip_address == o.ip_address &&
          status == o.status &&
          host_id == o.host_id &&
          created_at == o.created_at &&
          created_by == o.created_by &&
          deleted_by == o.deleted_by &&
          location_metadata_id == o.location_metadata_id &&
          link_listener == o.link_listener &&
          data_center_id == o.data_center_id &&
          verified == o.verified &&
          _links == o._links
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [deleted_at, network_id, name, updated_at, provider, online, ziti_id, user_data, owner_identity_id, attributes, provider_id, jwt, id, ip_address, status, host_id, created_at, created_by, deleted_by, location_metadata_id, link_listener, data_center_id, verified, _links].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
