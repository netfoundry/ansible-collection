=begin
#untitled API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 5229

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module OpenapiClient
  class InlineResponse20016
    attr_accessor :deleted_at

    attr_accessor :name

    attr_accessor :updated_at

    attr_accessor :email

    attr_accessor :description

    attr_accessor :aws_cognito_client_id

    attr_accessor :auth0_client_id

    attr_accessor :id

    attr_accessor :contact_email

    attr_accessor :created_at

    attr_accessor :organization_id

    attr_accessor :tenant_id

    attr_accessor :type

    attr_accessor :authentication_url

    attr_accessor :active

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'deleted_at' => :'deletedAt',
        :'name' => :'name',
        :'updated_at' => :'updatedAt',
        :'email' => :'email',
        :'description' => :'description',
        :'aws_cognito_client_id' => :'awsCognitoClientId',
        :'auth0_client_id' => :'auth0ClientId',
        :'id' => :'id',
        :'contact_email' => :'contactEmail',
        :'created_at' => :'createdAt',
        :'organization_id' => :'organizationId',
        :'tenant_id' => :'tenantId',
        :'type' => :'type',
        :'authentication_url' => :'authenticationUrl',
        :'active' => :'active'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'deleted_at' => :'AnyType',
        :'name' => :'String',
        :'updated_at' => :'AnyType',
        :'email' => :'String',
        :'description' => :'String',
        :'aws_cognito_client_id' => :'String',
        :'auth0_client_id' => :'AnyType',
        :'id' => :'String',
        :'contact_email' => :'String',
        :'created_at' => :'InlineResponse20014UpdatedAt',
        :'organization_id' => :'String',
        :'tenant_id' => :'String',
        :'type' => :'String',
        :'authentication_url' => :'String',
        :'active' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::InlineResponse20016` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::InlineResponse20016`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'deleted_at')
        self.deleted_at = attributes[:'deleted_at']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'aws_cognito_client_id')
        self.aws_cognito_client_id = attributes[:'aws_cognito_client_id']
      end

      if attributes.key?(:'auth0_client_id')
        self.auth0_client_id = attributes[:'auth0_client_id']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'contact_email')
        self.contact_email = attributes[:'contact_email']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'organization_id')
        self.organization_id = attributes[:'organization_id']
      end

      if attributes.key?(:'tenant_id')
        self.tenant_id = attributes[:'tenant_id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'authentication_url')
        self.authentication_url = attributes[:'authentication_url']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @deleted_at.nil?
        invalid_properties.push('invalid value for "deleted_at", deleted_at cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @aws_cognito_client_id.nil?
        invalid_properties.push('invalid value for "aws_cognito_client_id", aws_cognito_client_id cannot be nil.')
      end

      if @auth0_client_id.nil?
        invalid_properties.push('invalid value for "auth0_client_id", auth0_client_id cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @contact_email.nil?
        invalid_properties.push('invalid value for "contact_email", contact_email cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @organization_id.nil?
        invalid_properties.push('invalid value for "organization_id", organization_id cannot be nil.')
      end

      if @tenant_id.nil?
        invalid_properties.push('invalid value for "tenant_id", tenant_id cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @authentication_url.nil?
        invalid_properties.push('invalid value for "authentication_url", authentication_url cannot be nil.')
      end

      if @active.nil?
        invalid_properties.push('invalid value for "active", active cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @deleted_at.nil?
      return false if @name.nil?
      return false if @updated_at.nil?
      return false if @email.nil?
      return false if @description.nil?
      return false if @aws_cognito_client_id.nil?
      return false if @auth0_client_id.nil?
      return false if @id.nil?
      return false if @contact_email.nil?
      return false if @created_at.nil?
      return false if @organization_id.nil?
      return false if @tenant_id.nil?
      return false if @type.nil?
      return false if @authentication_url.nil?
      return false if @active.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          deleted_at == o.deleted_at &&
          name == o.name &&
          updated_at == o.updated_at &&
          email == o.email &&
          description == o.description &&
          aws_cognito_client_id == o.aws_cognito_client_id &&
          auth0_client_id == o.auth0_client_id &&
          id == o.id &&
          contact_email == o.contact_email &&
          created_at == o.created_at &&
          organization_id == o.organization_id &&
          tenant_id == o.tenant_id &&
          type == o.type &&
          authentication_url == o.authentication_url &&
          active == o.active
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [deleted_at, name, updated_at, email, description, aws_cognito_client_id, auth0_client_id, id, contact_email, created_at, organization_id, tenant_id, type, authentication_url, active].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
