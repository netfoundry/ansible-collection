=begin
#untitled API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 5170

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module OpenapiClient
  class InlineResponse2022ConfigIdByConfigTypeId
    attr_accessor :aca7f705_9f00_4ff6_8b86_63a4d44bde8a

    attr_accessor :_6cd51ae0_cfe4_499d_88d8_d02a9e18b25f

    attr_accessor :d28725c0_9771_47d7_a9da_e408bd0adf4e

    attr_accessor :_888d6565_4359_4d91_b38d_0a24124e4456

    attr_accessor :feb075cd_dd2b_47c5_922c_86ef3b06fb16

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'aca7f705_9f00_4ff6_8b86_63a4d44bde8a' => :'aca7f705-9f00-4ff6-8b86-63a4d44bde8a',
        :'_6cd51ae0_cfe4_499d_88d8_d02a9e18b25f' => :'6cd51ae0-cfe4-499d-88d8-d02a9e18b25f',
        :'d28725c0_9771_47d7_a9da_e408bd0adf4e' => :'d28725c0-9771-47d7-a9da-e408bd0adf4e',
        :'_888d6565_4359_4d91_b38d_0a24124e4456' => :'888d6565-4359-4d91-b38d-0a24124e4456',
        :'feb075cd_dd2b_47c5_922c_86ef3b06fb16' => :'feb075cd-dd2b-47c5-922c-86ef3b06fb16'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'aca7f705_9f00_4ff6_8b86_63a4d44bde8a' => :'String',
        :'_6cd51ae0_cfe4_499d_88d8_d02a9e18b25f' => :'String',
        :'d28725c0_9771_47d7_a9da_e408bd0adf4e' => :'String',
        :'_888d6565_4359_4d91_b38d_0a24124e4456' => :'String',
        :'feb075cd_dd2b_47c5_922c_86ef3b06fb16' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::InlineResponse2022ConfigIdByConfigTypeId` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::InlineResponse2022ConfigIdByConfigTypeId`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'aca7f705_9f00_4ff6_8b86_63a4d44bde8a')
        self.aca7f705_9f00_4ff6_8b86_63a4d44bde8a = attributes[:'aca7f705_9f00_4ff6_8b86_63a4d44bde8a']
      end

      if attributes.key?(:'_6cd51ae0_cfe4_499d_88d8_d02a9e18b25f')
        self._6cd51ae0_cfe4_499d_88d8_d02a9e18b25f = attributes[:'_6cd51ae0_cfe4_499d_88d8_d02a9e18b25f']
      end

      if attributes.key?(:'d28725c0_9771_47d7_a9da_e408bd0adf4e')
        self.d28725c0_9771_47d7_a9da_e408bd0adf4e = attributes[:'d28725c0_9771_47d7_a9da_e408bd0adf4e']
      end

      if attributes.key?(:'_888d6565_4359_4d91_b38d_0a24124e4456')
        self._888d6565_4359_4d91_b38d_0a24124e4456 = attributes[:'_888d6565_4359_4d91_b38d_0a24124e4456']
      end

      if attributes.key?(:'feb075cd_dd2b_47c5_922c_86ef3b06fb16')
        self.feb075cd_dd2b_47c5_922c_86ef3b06fb16 = attributes[:'feb075cd_dd2b_47c5_922c_86ef3b06fb16']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aca7f705_9f00_4ff6_8b86_63a4d44bde8a == o.aca7f705_9f00_4ff6_8b86_63a4d44bde8a &&
          _6cd51ae0_cfe4_499d_88d8_d02a9e18b25f == o._6cd51ae0_cfe4_499d_88d8_d02a9e18b25f &&
          d28725c0_9771_47d7_a9da_e408bd0adf4e == o.d28725c0_9771_47d7_a9da_e408bd0adf4e &&
          _888d6565_4359_4d91_b38d_0a24124e4456 == o._888d6565_4359_4d91_b38d_0a24124e4456 &&
          feb075cd_dd2b_47c5_922c_86ef3b06fb16 == o.feb075cd_dd2b_47c5_922c_86ef3b06fb16
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [aca7f705_9f00_4ff6_8b86_63a4d44bde8a, _6cd51ae0_cfe4_499d_88d8_d02a9e18b25f, d28725c0_9771_47d7_a9da_e408bd0adf4e, _888d6565_4359_4d91_b38d_0a24124e4456, feb075cd_dd2b_47c5_922c_86ef3b06fb16].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
