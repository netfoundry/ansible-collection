=begin
#untitled API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 5227

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module OpenapiClient
  class InlineResponse2002EmbeddedDataCenters
    attr_accessor :city

    attr_accessor :continent_code

    attr_accessor :state_code

    attr_accessor :lng

    attr_accessor :provider

    attr_accessor :state_name

    attr_accessor :continent_name

    attr_accessor :isp

    attr_accessor :location_code

    attr_accessor :country_name

    attr_accessor :id

    attr_accessor :country_code

    attr_accessor :address

    attr_accessor :location_name

    attr_accessor :lat

    attr_accessor :_links

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'city' => :'city',
        :'continent_code' => :'continentCode',
        :'state_code' => :'stateCode',
        :'lng' => :'lng',
        :'provider' => :'provider',
        :'state_name' => :'stateName',
        :'continent_name' => :'continentName',
        :'isp' => :'isp',
        :'location_code' => :'locationCode',
        :'country_name' => :'countryName',
        :'id' => :'id',
        :'country_code' => :'countryCode',
        :'address' => :'address',
        :'location_name' => :'locationName',
        :'lat' => :'lat',
        :'_links' => :'_links'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'city' => :'AnyType',
        :'continent_code' => :'AnyType',
        :'state_code' => :'AnyType',
        :'lng' => :'Float',
        :'provider' => :'String',
        :'state_name' => :'AnyType',
        :'continent_name' => :'AnyType',
        :'isp' => :'AnyType',
        :'location_code' => :'String',
        :'country_name' => :'AnyType',
        :'id' => :'String',
        :'country_code' => :'AnyType',
        :'address' => :'AnyType',
        :'location_name' => :'String',
        :'lat' => :'Float',
        :'_links' => :'InlineResponse2002EmbeddedLinks'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::InlineResponse2002EmbeddedDataCenters` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::InlineResponse2002EmbeddedDataCenters`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'continent_code')
        self.continent_code = attributes[:'continent_code']
      end

      if attributes.key?(:'state_code')
        self.state_code = attributes[:'state_code']
      end

      if attributes.key?(:'lng')
        self.lng = attributes[:'lng']
      end

      if attributes.key?(:'provider')
        self.provider = attributes[:'provider']
      end

      if attributes.key?(:'state_name')
        self.state_name = attributes[:'state_name']
      end

      if attributes.key?(:'continent_name')
        self.continent_name = attributes[:'continent_name']
      end

      if attributes.key?(:'isp')
        self.isp = attributes[:'isp']
      end

      if attributes.key?(:'location_code')
        self.location_code = attributes[:'location_code']
      end

      if attributes.key?(:'country_name')
        self.country_name = attributes[:'country_name']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'location_name')
        self.location_name = attributes[:'location_name']
      end

      if attributes.key?(:'lat')
        self.lat = attributes[:'lat']
      end

      if attributes.key?(:'_links')
        self._links = attributes[:'_links']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @city.nil?
        invalid_properties.push('invalid value for "city", city cannot be nil.')
      end

      if @continent_code.nil?
        invalid_properties.push('invalid value for "continent_code", continent_code cannot be nil.')
      end

      if @state_code.nil?
        invalid_properties.push('invalid value for "state_code", state_code cannot be nil.')
      end

      if @lng.nil?
        invalid_properties.push('invalid value for "lng", lng cannot be nil.')
      end

      if @provider.nil?
        invalid_properties.push('invalid value for "provider", provider cannot be nil.')
      end

      if @state_name.nil?
        invalid_properties.push('invalid value for "state_name", state_name cannot be nil.')
      end

      if @continent_name.nil?
        invalid_properties.push('invalid value for "continent_name", continent_name cannot be nil.')
      end

      if @isp.nil?
        invalid_properties.push('invalid value for "isp", isp cannot be nil.')
      end

      if @location_code.nil?
        invalid_properties.push('invalid value for "location_code", location_code cannot be nil.')
      end

      if @country_name.nil?
        invalid_properties.push('invalid value for "country_name", country_name cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @country_code.nil?
        invalid_properties.push('invalid value for "country_code", country_code cannot be nil.')
      end

      if @address.nil?
        invalid_properties.push('invalid value for "address", address cannot be nil.')
      end

      if @location_name.nil?
        invalid_properties.push('invalid value for "location_name", location_name cannot be nil.')
      end

      if @lat.nil?
        invalid_properties.push('invalid value for "lat", lat cannot be nil.')
      end

      if @_links.nil?
        invalid_properties.push('invalid value for "_links", _links cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @city.nil?
      return false if @continent_code.nil?
      return false if @state_code.nil?
      return false if @lng.nil?
      return false if @provider.nil?
      return false if @state_name.nil?
      return false if @continent_name.nil?
      return false if @isp.nil?
      return false if @location_code.nil?
      return false if @country_name.nil?
      return false if @id.nil?
      return false if @country_code.nil?
      return false if @address.nil?
      return false if @location_name.nil?
      return false if @lat.nil?
      return false if @_links.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          city == o.city &&
          continent_code == o.continent_code &&
          state_code == o.state_code &&
          lng == o.lng &&
          provider == o.provider &&
          state_name == o.state_name &&
          continent_name == o.continent_name &&
          isp == o.isp &&
          location_code == o.location_code &&
          country_name == o.country_name &&
          id == o.id &&
          country_code == o.country_code &&
          address == o.address &&
          location_name == o.location_name &&
          lat == o.lat &&
          _links == o._links
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [city, continent_code, state_code, lng, provider, state_name, continent_name, isp, location_code, country_name, id, country_code, address, location_name, lat, _links].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
