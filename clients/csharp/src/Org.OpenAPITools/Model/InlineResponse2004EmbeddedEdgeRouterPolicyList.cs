/* 
 * untitled API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5227
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineResponse2004EmbeddedEdgeRouterPolicyList
    /// </summary>
    [DataContract]
    public partial class InlineResponse2004EmbeddedEdgeRouterPolicyList :  IEquatable<InlineResponse2004EmbeddedEdgeRouterPolicyList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004EmbeddedEdgeRouterPolicyList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2004EmbeddedEdgeRouterPolicyList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004EmbeddedEdgeRouterPolicyList" /> class.
        /// </summary>
        /// <param name="deletedAt">deletedAt (required).</param>
        /// <param name="networkId">networkId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="edgeRouterAttributes">edgeRouterAttributes (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="zitiId">zitiId (required).</param>
        /// <param name="ownerIdentityId">ownerIdentityId (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="createdBy">createdBy (required).</param>
        /// <param name="deletedBy">deletedBy (required).</param>
        /// <param name="endpointAttributes">endpointAttributes (required).</param>
        /// <param name="links">links (required).</param>
        public InlineResponse2004EmbeddedEdgeRouterPolicyList(AnyType deletedAt = default(AnyType), string networkId = default(string), string name = default(string), List<string> edgeRouterAttributes = default(List<string>), string updatedAt = default(string), string zitiId = default(string), string ownerIdentityId = default(string), string id = default(string), string createdAt = default(string), string createdBy = default(string), AnyType deletedBy = default(AnyType), List<string> endpointAttributes = default(List<string>), InlineResponse200Links links = default(InlineResponse200Links))
        {
            // to ensure "deletedAt" is required (not null)
            if (deletedAt == null)
            {
                throw new InvalidDataException("deletedAt is a required property for InlineResponse2004EmbeddedEdgeRouterPolicyList and cannot be null");
            }
            else
            {
                this.DeletedAt = deletedAt;
            }
            
            // to ensure "networkId" is required (not null)
            if (networkId == null)
            {
                throw new InvalidDataException("networkId is a required property for InlineResponse2004EmbeddedEdgeRouterPolicyList and cannot be null");
            }
            else
            {
                this.NetworkId = networkId;
            }
            
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for InlineResponse2004EmbeddedEdgeRouterPolicyList and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "edgeRouterAttributes" is required (not null)
            if (edgeRouterAttributes == null)
            {
                throw new InvalidDataException("edgeRouterAttributes is a required property for InlineResponse2004EmbeddedEdgeRouterPolicyList and cannot be null");
            }
            else
            {
                this.EdgeRouterAttributes = edgeRouterAttributes;
            }
            
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new InvalidDataException("updatedAt is a required property for InlineResponse2004EmbeddedEdgeRouterPolicyList and cannot be null");
            }
            else
            {
                this.UpdatedAt = updatedAt;
            }
            
            // to ensure "zitiId" is required (not null)
            if (zitiId == null)
            {
                throw new InvalidDataException("zitiId is a required property for InlineResponse2004EmbeddedEdgeRouterPolicyList and cannot be null");
            }
            else
            {
                this.ZitiId = zitiId;
            }
            
            // to ensure "ownerIdentityId" is required (not null)
            if (ownerIdentityId == null)
            {
                throw new InvalidDataException("ownerIdentityId is a required property for InlineResponse2004EmbeddedEdgeRouterPolicyList and cannot be null");
            }
            else
            {
                this.OwnerIdentityId = ownerIdentityId;
            }
            
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for InlineResponse2004EmbeddedEdgeRouterPolicyList and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for InlineResponse2004EmbeddedEdgeRouterPolicyList and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }
            
            // to ensure "createdBy" is required (not null)
            if (createdBy == null)
            {
                throw new InvalidDataException("createdBy is a required property for InlineResponse2004EmbeddedEdgeRouterPolicyList and cannot be null");
            }
            else
            {
                this.CreatedBy = createdBy;
            }
            
            // to ensure "deletedBy" is required (not null)
            if (deletedBy == null)
            {
                throw new InvalidDataException("deletedBy is a required property for InlineResponse2004EmbeddedEdgeRouterPolicyList and cannot be null");
            }
            else
            {
                this.DeletedBy = deletedBy;
            }
            
            // to ensure "endpointAttributes" is required (not null)
            if (endpointAttributes == null)
            {
                throw new InvalidDataException("endpointAttributes is a required property for InlineResponse2004EmbeddedEdgeRouterPolicyList and cannot be null");
            }
            else
            {
                this.EndpointAttributes = endpointAttributes;
            }
            
            // to ensure "links" is required (not null)
            if (links == null)
            {
                throw new InvalidDataException("links is a required property for InlineResponse2004EmbeddedEdgeRouterPolicyList and cannot be null");
            }
            else
            {
                this.Links = links;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name="deletedAt", EmitDefaultValue=true)]
        public AnyType DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets NetworkId
        /// </summary>
        [DataMember(Name="networkId", EmitDefaultValue=true)]
        public string NetworkId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets EdgeRouterAttributes
        /// </summary>
        [DataMember(Name="edgeRouterAttributes", EmitDefaultValue=true)]
        public List<string> EdgeRouterAttributes { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ZitiId
        /// </summary>
        [DataMember(Name="zitiId", EmitDefaultValue=true)]
        public string ZitiId { get; set; }

        /// <summary>
        /// Gets or Sets OwnerIdentityId
        /// </summary>
        [DataMember(Name="ownerIdentityId", EmitDefaultValue=true)]
        public string OwnerIdentityId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name="deletedBy", EmitDefaultValue=true)]
        public AnyType DeletedBy { get; set; }

        /// <summary>
        /// Gets or Sets EndpointAttributes
        /// </summary>
        [DataMember(Name="endpointAttributes", EmitDefaultValue=true)]
        public List<string> EndpointAttributes { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=true)]
        public InlineResponse200Links Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2004EmbeddedEdgeRouterPolicyList {\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  NetworkId: ").Append(NetworkId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EdgeRouterAttributes: ").Append(EdgeRouterAttributes).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ZitiId: ").Append(ZitiId).Append("\n");
            sb.Append("  OwnerIdentityId: ").Append(OwnerIdentityId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  EndpointAttributes: ").Append(EndpointAttributes).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004EmbeddedEdgeRouterPolicyList);
        }

        /// <summary>
        /// Returns true if InlineResponse2004EmbeddedEdgeRouterPolicyList instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004EmbeddedEdgeRouterPolicyList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004EmbeddedEdgeRouterPolicyList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                ) && 
                (
                    this.NetworkId == input.NetworkId ||
                    (this.NetworkId != null &&
                    this.NetworkId.Equals(input.NetworkId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EdgeRouterAttributes == input.EdgeRouterAttributes ||
                    this.EdgeRouterAttributes != null &&
                    input.EdgeRouterAttributes != null &&
                    this.EdgeRouterAttributes.SequenceEqual(input.EdgeRouterAttributes)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.ZitiId == input.ZitiId ||
                    (this.ZitiId != null &&
                    this.ZitiId.Equals(input.ZitiId))
                ) && 
                (
                    this.OwnerIdentityId == input.OwnerIdentityId ||
                    (this.OwnerIdentityId != null &&
                    this.OwnerIdentityId.Equals(input.OwnerIdentityId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.DeletedBy == input.DeletedBy ||
                    (this.DeletedBy != null &&
                    this.DeletedBy.Equals(input.DeletedBy))
                ) && 
                (
                    this.EndpointAttributes == input.EndpointAttributes ||
                    this.EndpointAttributes != null &&
                    input.EndpointAttributes != null &&
                    this.EndpointAttributes.SequenceEqual(input.EndpointAttributes)
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeletedAt != null)
                    hashCode = hashCode * 59 + this.DeletedAt.GetHashCode();
                if (this.NetworkId != null)
                    hashCode = hashCode * 59 + this.NetworkId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.EdgeRouterAttributes != null)
                    hashCode = hashCode * 59 + this.EdgeRouterAttributes.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.ZitiId != null)
                    hashCode = hashCode * 59 + this.ZitiId.GetHashCode();
                if (this.OwnerIdentityId != null)
                    hashCode = hashCode * 59 + this.OwnerIdentityId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.DeletedBy != null)
                    hashCode = hashCode * 59 + this.DeletedBy.GetHashCode();
                if (this.EndpointAttributes != null)
                    hashCode = hashCode * 59 + this.EndpointAttributes.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
