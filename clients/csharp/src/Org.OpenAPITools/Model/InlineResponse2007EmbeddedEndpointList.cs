/* 
 * untitled API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5170
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineResponse2007EmbeddedEndpointList
    /// </summary>
    [DataContract]
    public partial class InlineResponse2007EmbeddedEndpointList :  IEquatable<InlineResponse2007EmbeddedEndpointList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2007EmbeddedEndpointList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2007EmbeddedEndpointList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2007EmbeddedEndpointList" /> class.
        /// </summary>
        /// <param name="mfaEnabled">mfaEnabled (required).</param>
        /// <param name="deletedAt">deletedAt (required).</param>
        /// <param name="networkId">networkId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="syncId">syncId (required).</param>
        /// <param name="sessionIdentityId">sessionIdentityId (required).</param>
        /// <param name="osRelease">osRelease (required).</param>
        /// <param name="syncResourceId">syncResourceId (required).</param>
        /// <param name="zitiId">zitiId (required).</param>
        /// <param name="appVersion">appVersion (required).</param>
        /// <param name="branch">branch (required).</param>
        /// <param name="os">os (required).</param>
        /// <param name="ownerIdentityId">ownerIdentityId (required).</param>
        /// <param name="hasEdgeRouterConnection">hasEdgeRouterConnection (required).</param>
        /// <param name="attributes">attributes (required).</param>
        /// <param name="hasApiSession">hasApiSession (required).</param>
        /// <param name="revision">revision (required).</param>
        /// <param name="version">version (required).</param>
        /// <param name="jwt">jwt (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="sessionActive">sessionActive (required).</param>
        /// <param name="jwtExpiresAt">jwtExpiresAt (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="arch">arch (required).</param>
        /// <param name="createdBy">createdBy (required).</param>
        /// <param name="deletedBy">deletedBy (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="osVersion">osVersion (required).</param>
        /// <param name="appId">appId (required).</param>
        /// <param name="links">links (required).</param>
        public InlineResponse2007EmbeddedEndpointList(bool mfaEnabled = default(bool), AnyType deletedAt = default(AnyType), string networkId = default(string), string name = default(string), string updatedAt = default(string), AnyType syncId = default(AnyType), AnyType sessionIdentityId = default(AnyType), AnyType osRelease = default(AnyType), AnyType syncResourceId = default(AnyType), string zitiId = default(string), AnyType appVersion = default(AnyType), AnyType branch = default(AnyType), AnyType os = default(AnyType), string ownerIdentityId = default(string), bool hasEdgeRouterConnection = default(bool), List<string> attributes = default(List<string>), bool hasApiSession = default(bool), AnyType revision = default(AnyType), AnyType version = default(AnyType), AnyType jwt = default(AnyType), string id = default(string), bool sessionActive = default(bool), AnyType jwtExpiresAt = default(AnyType), string createdAt = default(string), AnyType arch = default(AnyType), string createdBy = default(string), AnyType deletedBy = default(AnyType), AnyType type = default(AnyType), AnyType osVersion = default(AnyType), AnyType appId = default(AnyType), InlineResponse200Links links = default(InlineResponse200Links))
        {
            // to ensure "mfaEnabled" is required (not null)
            if (mfaEnabled == null)
            {
                throw new InvalidDataException("mfaEnabled is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.MfaEnabled = mfaEnabled;
            }
            
            // to ensure "deletedAt" is required (not null)
            if (deletedAt == null)
            {
                throw new InvalidDataException("deletedAt is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.DeletedAt = deletedAt;
            }
            
            // to ensure "networkId" is required (not null)
            if (networkId == null)
            {
                throw new InvalidDataException("networkId is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.NetworkId = networkId;
            }
            
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new InvalidDataException("updatedAt is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.UpdatedAt = updatedAt;
            }
            
            // to ensure "syncId" is required (not null)
            if (syncId == null)
            {
                throw new InvalidDataException("syncId is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.SyncId = syncId;
            }
            
            // to ensure "sessionIdentityId" is required (not null)
            if (sessionIdentityId == null)
            {
                throw new InvalidDataException("sessionIdentityId is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.SessionIdentityId = sessionIdentityId;
            }
            
            // to ensure "osRelease" is required (not null)
            if (osRelease == null)
            {
                throw new InvalidDataException("osRelease is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.OsRelease = osRelease;
            }
            
            // to ensure "syncResourceId" is required (not null)
            if (syncResourceId == null)
            {
                throw new InvalidDataException("syncResourceId is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.SyncResourceId = syncResourceId;
            }
            
            // to ensure "zitiId" is required (not null)
            if (zitiId == null)
            {
                throw new InvalidDataException("zitiId is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.ZitiId = zitiId;
            }
            
            // to ensure "appVersion" is required (not null)
            if (appVersion == null)
            {
                throw new InvalidDataException("appVersion is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.AppVersion = appVersion;
            }
            
            // to ensure "branch" is required (not null)
            if (branch == null)
            {
                throw new InvalidDataException("branch is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.Branch = branch;
            }
            
            // to ensure "os" is required (not null)
            if (os == null)
            {
                throw new InvalidDataException("os is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.Os = os;
            }
            
            // to ensure "ownerIdentityId" is required (not null)
            if (ownerIdentityId == null)
            {
                throw new InvalidDataException("ownerIdentityId is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.OwnerIdentityId = ownerIdentityId;
            }
            
            // to ensure "hasEdgeRouterConnection" is required (not null)
            if (hasEdgeRouterConnection == null)
            {
                throw new InvalidDataException("hasEdgeRouterConnection is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.HasEdgeRouterConnection = hasEdgeRouterConnection;
            }
            
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new InvalidDataException("attributes is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.Attributes = attributes;
            }
            
            // to ensure "hasApiSession" is required (not null)
            if (hasApiSession == null)
            {
                throw new InvalidDataException("hasApiSession is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.HasApiSession = hasApiSession;
            }
            
            // to ensure "revision" is required (not null)
            if (revision == null)
            {
                throw new InvalidDataException("revision is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.Revision = revision;
            }
            
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            
            // to ensure "jwt" is required (not null)
            if (jwt == null)
            {
                throw new InvalidDataException("jwt is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.Jwt = jwt;
            }
            
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            
            // to ensure "sessionActive" is required (not null)
            if (sessionActive == null)
            {
                throw new InvalidDataException("sessionActive is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.SessionActive = sessionActive;
            }
            
            // to ensure "jwtExpiresAt" is required (not null)
            if (jwtExpiresAt == null)
            {
                throw new InvalidDataException("jwtExpiresAt is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.JwtExpiresAt = jwtExpiresAt;
            }
            
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }
            
            // to ensure "arch" is required (not null)
            if (arch == null)
            {
                throw new InvalidDataException("arch is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.Arch = arch;
            }
            
            // to ensure "createdBy" is required (not null)
            if (createdBy == null)
            {
                throw new InvalidDataException("createdBy is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.CreatedBy = createdBy;
            }
            
            // to ensure "deletedBy" is required (not null)
            if (deletedBy == null)
            {
                throw new InvalidDataException("deletedBy is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.DeletedBy = deletedBy;
            }
            
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            // to ensure "osVersion" is required (not null)
            if (osVersion == null)
            {
                throw new InvalidDataException("osVersion is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.OsVersion = osVersion;
            }
            
            // to ensure "appId" is required (not null)
            if (appId == null)
            {
                throw new InvalidDataException("appId is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.AppId = appId;
            }
            
            // to ensure "links" is required (not null)
            if (links == null)
            {
                throw new InvalidDataException("links is a required property for InlineResponse2007EmbeddedEndpointList and cannot be null");
            }
            else
            {
                this.Links = links;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets MfaEnabled
        /// </summary>
        [DataMember(Name="mfaEnabled", EmitDefaultValue=true)]
        public bool MfaEnabled { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name="deletedAt", EmitDefaultValue=true)]
        public AnyType DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets NetworkId
        /// </summary>
        [DataMember(Name="networkId", EmitDefaultValue=true)]
        public string NetworkId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets SyncId
        /// </summary>
        [DataMember(Name="syncId", EmitDefaultValue=true)]
        public AnyType SyncId { get; set; }

        /// <summary>
        /// Gets or Sets SessionIdentityId
        /// </summary>
        [DataMember(Name="sessionIdentityId", EmitDefaultValue=true)]
        public AnyType SessionIdentityId { get; set; }

        /// <summary>
        /// Gets or Sets OsRelease
        /// </summary>
        [DataMember(Name="osRelease", EmitDefaultValue=true)]
        public AnyType OsRelease { get; set; }

        /// <summary>
        /// Gets or Sets SyncResourceId
        /// </summary>
        [DataMember(Name="syncResourceId", EmitDefaultValue=true)]
        public AnyType SyncResourceId { get; set; }

        /// <summary>
        /// Gets or Sets ZitiId
        /// </summary>
        [DataMember(Name="zitiId", EmitDefaultValue=true)]
        public string ZitiId { get; set; }

        /// <summary>
        /// Gets or Sets AppVersion
        /// </summary>
        [DataMember(Name="appVersion", EmitDefaultValue=true)]
        public AnyType AppVersion { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="branch", EmitDefaultValue=true)]
        public AnyType Branch { get; set; }

        /// <summary>
        /// Gets or Sets Os
        /// </summary>
        [DataMember(Name="os", EmitDefaultValue=true)]
        public AnyType Os { get; set; }

        /// <summary>
        /// Gets or Sets OwnerIdentityId
        /// </summary>
        [DataMember(Name="ownerIdentityId", EmitDefaultValue=true)]
        public string OwnerIdentityId { get; set; }

        /// <summary>
        /// Gets or Sets HasEdgeRouterConnection
        /// </summary>
        [DataMember(Name="hasEdgeRouterConnection", EmitDefaultValue=true)]
        public bool HasEdgeRouterConnection { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=true)]
        public List<string> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets HasApiSession
        /// </summary>
        [DataMember(Name="hasApiSession", EmitDefaultValue=true)]
        public bool HasApiSession { get; set; }

        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name="revision", EmitDefaultValue=true)]
        public AnyType Revision { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=true)]
        public AnyType Version { get; set; }

        /// <summary>
        /// Gets or Sets Jwt
        /// </summary>
        [DataMember(Name="jwt", EmitDefaultValue=true)]
        public AnyType Jwt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets SessionActive
        /// </summary>
        [DataMember(Name="sessionActive", EmitDefaultValue=true)]
        public bool SessionActive { get; set; }

        /// <summary>
        /// Gets or Sets JwtExpiresAt
        /// </summary>
        [DataMember(Name="jwtExpiresAt", EmitDefaultValue=true)]
        public AnyType JwtExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Arch
        /// </summary>
        [DataMember(Name="arch", EmitDefaultValue=true)]
        public AnyType Arch { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name="deletedBy", EmitDefaultValue=true)]
        public AnyType DeletedBy { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public AnyType Type { get; set; }

        /// <summary>
        /// Gets or Sets OsVersion
        /// </summary>
        [DataMember(Name="osVersion", EmitDefaultValue=true)]
        public AnyType OsVersion { get; set; }

        /// <summary>
        /// Gets or Sets AppId
        /// </summary>
        [DataMember(Name="appId", EmitDefaultValue=true)]
        public AnyType AppId { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=true)]
        public InlineResponse200Links Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2007EmbeddedEndpointList {\n");
            sb.Append("  MfaEnabled: ").Append(MfaEnabled).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  NetworkId: ").Append(NetworkId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  SyncId: ").Append(SyncId).Append("\n");
            sb.Append("  SessionIdentityId: ").Append(SessionIdentityId).Append("\n");
            sb.Append("  OsRelease: ").Append(OsRelease).Append("\n");
            sb.Append("  SyncResourceId: ").Append(SyncResourceId).Append("\n");
            sb.Append("  ZitiId: ").Append(ZitiId).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  OwnerIdentityId: ").Append(OwnerIdentityId).Append("\n");
            sb.Append("  HasEdgeRouterConnection: ").Append(HasEdgeRouterConnection).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  HasApiSession: ").Append(HasApiSession).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Jwt: ").Append(Jwt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SessionActive: ").Append(SessionActive).Append("\n");
            sb.Append("  JwtExpiresAt: ").Append(JwtExpiresAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Arch: ").Append(Arch).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OsVersion: ").Append(OsVersion).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2007EmbeddedEndpointList);
        }

        /// <summary>
        /// Returns true if InlineResponse2007EmbeddedEndpointList instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2007EmbeddedEndpointList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2007EmbeddedEndpointList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MfaEnabled == input.MfaEnabled ||
                    (this.MfaEnabled != null &&
                    this.MfaEnabled.Equals(input.MfaEnabled))
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                ) && 
                (
                    this.NetworkId == input.NetworkId ||
                    (this.NetworkId != null &&
                    this.NetworkId.Equals(input.NetworkId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.SyncId == input.SyncId ||
                    (this.SyncId != null &&
                    this.SyncId.Equals(input.SyncId))
                ) && 
                (
                    this.SessionIdentityId == input.SessionIdentityId ||
                    (this.SessionIdentityId != null &&
                    this.SessionIdentityId.Equals(input.SessionIdentityId))
                ) && 
                (
                    this.OsRelease == input.OsRelease ||
                    (this.OsRelease != null &&
                    this.OsRelease.Equals(input.OsRelease))
                ) && 
                (
                    this.SyncResourceId == input.SyncResourceId ||
                    (this.SyncResourceId != null &&
                    this.SyncResourceId.Equals(input.SyncResourceId))
                ) && 
                (
                    this.ZitiId == input.ZitiId ||
                    (this.ZitiId != null &&
                    this.ZitiId.Equals(input.ZitiId))
                ) && 
                (
                    this.AppVersion == input.AppVersion ||
                    (this.AppVersion != null &&
                    this.AppVersion.Equals(input.AppVersion))
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.Os == input.Os ||
                    (this.Os != null &&
                    this.Os.Equals(input.Os))
                ) && 
                (
                    this.OwnerIdentityId == input.OwnerIdentityId ||
                    (this.OwnerIdentityId != null &&
                    this.OwnerIdentityId.Equals(input.OwnerIdentityId))
                ) && 
                (
                    this.HasEdgeRouterConnection == input.HasEdgeRouterConnection ||
                    (this.HasEdgeRouterConnection != null &&
                    this.HasEdgeRouterConnection.Equals(input.HasEdgeRouterConnection))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.HasApiSession == input.HasApiSession ||
                    (this.HasApiSession != null &&
                    this.HasApiSession.Equals(input.HasApiSession))
                ) && 
                (
                    this.Revision == input.Revision ||
                    (this.Revision != null &&
                    this.Revision.Equals(input.Revision))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Jwt == input.Jwt ||
                    (this.Jwt != null &&
                    this.Jwt.Equals(input.Jwt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SessionActive == input.SessionActive ||
                    (this.SessionActive != null &&
                    this.SessionActive.Equals(input.SessionActive))
                ) && 
                (
                    this.JwtExpiresAt == input.JwtExpiresAt ||
                    (this.JwtExpiresAt != null &&
                    this.JwtExpiresAt.Equals(input.JwtExpiresAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Arch == input.Arch ||
                    (this.Arch != null &&
                    this.Arch.Equals(input.Arch))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.DeletedBy == input.DeletedBy ||
                    (this.DeletedBy != null &&
                    this.DeletedBy.Equals(input.DeletedBy))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.OsVersion == input.OsVersion ||
                    (this.OsVersion != null &&
                    this.OsVersion.Equals(input.OsVersion))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MfaEnabled != null)
                    hashCode = hashCode * 59 + this.MfaEnabled.GetHashCode();
                if (this.DeletedAt != null)
                    hashCode = hashCode * 59 + this.DeletedAt.GetHashCode();
                if (this.NetworkId != null)
                    hashCode = hashCode * 59 + this.NetworkId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.SyncId != null)
                    hashCode = hashCode * 59 + this.SyncId.GetHashCode();
                if (this.SessionIdentityId != null)
                    hashCode = hashCode * 59 + this.SessionIdentityId.GetHashCode();
                if (this.OsRelease != null)
                    hashCode = hashCode * 59 + this.OsRelease.GetHashCode();
                if (this.SyncResourceId != null)
                    hashCode = hashCode * 59 + this.SyncResourceId.GetHashCode();
                if (this.ZitiId != null)
                    hashCode = hashCode * 59 + this.ZitiId.GetHashCode();
                if (this.AppVersion != null)
                    hashCode = hashCode * 59 + this.AppVersion.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.Os != null)
                    hashCode = hashCode * 59 + this.Os.GetHashCode();
                if (this.OwnerIdentityId != null)
                    hashCode = hashCode * 59 + this.OwnerIdentityId.GetHashCode();
                if (this.HasEdgeRouterConnection != null)
                    hashCode = hashCode * 59 + this.HasEdgeRouterConnection.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.HasApiSession != null)
                    hashCode = hashCode * 59 + this.HasApiSession.GetHashCode();
                if (this.Revision != null)
                    hashCode = hashCode * 59 + this.Revision.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Jwt != null)
                    hashCode = hashCode * 59 + this.Jwt.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SessionActive != null)
                    hashCode = hashCode * 59 + this.SessionActive.GetHashCode();
                if (this.JwtExpiresAt != null)
                    hashCode = hashCode * 59 + this.JwtExpiresAt.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Arch != null)
                    hashCode = hashCode * 59 + this.Arch.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.DeletedBy != null)
                    hashCode = hashCode * 59 + this.DeletedBy.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.OsVersion != null)
                    hashCode = hashCode * 59 + this.OsVersion.GetHashCode();
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
