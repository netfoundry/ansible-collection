=begin comment

untitled API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 5229

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::DefaultApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# request4_q1q_u3c4dk
#
# Get an Edge Router
# 
# @param string $edge_router_id  (required)
{
    my $params = {
    'edge_router_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'request4_q1q_u3c4dk' } = { 
        summary => 'Get an Edge Router',
        params => $params,
        returns => 'InlineResponse20012',
        };
}
# @return InlineResponse20012
#
sub request4_q1q_u3c4dk {
    my ($self, %args) = @_;

    # verify the required parameter 'edge_router_id' is set
    unless (exists $args{'edge_router_id'}) {
      croak("Missing the required parameter 'edge_router_id' when calling request4_q1q_u3c4dk");
    }

    # parse inputs
    my $_resource_path = '/core/v2/edge-routers/{edgeRouterId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'edge_router_id'}) {
        my $_base_variable = "{" . "edgeRouterId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'edge_router_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20012', $response);
    return $_response_object;
}

#
# request9s_du_piz_ciu
#
# Create an Endpoint
# 
# @param InlineObject5 $inline_object5  (optional)
{
    my $params = {
    'inline_object5' => {
        data_type => 'InlineObject5',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'request9s_du_piz_ciu' } = { 
        summary => 'Create an Endpoint',
        params => $params,
        returns => 'InlineResponse2008',
        };
}
# @return InlineResponse2008
#
sub request9s_du_piz_ciu {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/endpoints';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'inline_object5'}) {
        $_body_data = $args{'inline_object5'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2008', $response);
    return $_response_object;
}

#
# request_a8syya_p_znw
#
# Get the list of Network product versions
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'request_a8syya_p_znw' } = { 
        summary => 'Get the list of Network product versions',
        params => $params,
        returns => 'InlineResponse20019',
        };
}
# @return InlineResponse20019
#
sub request_a8syya_p_znw {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/product-metadata/v2/download-urls.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20019', $response);
    return $_response_object;
}

#
# request_auar_cs_ihk_j
#
# Get the registration information for an Edge Router
# 
# @param string $edge_router_id  (required)
{
    my $params = {
    'edge_router_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_auar_cs_ihk_j' } = { 
        summary => 'Get the registration information for an Edge Router',
        params => $params,
        returns => 'InlineResponse2009',
        };
}
# @return InlineResponse2009
#
sub request_auar_cs_ihk_j {
    my ($self, %args) = @_;

    # verify the required parameter 'edge_router_id' is set
    unless (exists $args{'edge_router_id'}) {
      croak("Missing the required parameter 'edge_router_id' when calling request_auar_cs_ihk_j");
    }

    # parse inputs
    my $_resource_path = '/core/v2/edge-routers/{edgeRouterId}/registration-key';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'edge_router_id'}) {
        my $_base_variable = "{" . "edgeRouterId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'edge_router_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2009', $response);
    return $_response_object;
}

#
# request_ay_fh_a_qd5pn
#
# Get an Endpoint
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'request_ay_fh_a_qd5pn' } = { 
        summary => 'Get an Endpoint',
        params => $params,
        returns => 'InlineResponse2007',
        };
}
# @return InlineResponse2007
#
sub request_ay_fh_a_qd5pn {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/endpoints';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2007', $response);
    return $_response_object;
}

#
# request_btgg9_zl_c0e
#
# Get an Edge Router Policy
# 
# @param string $edge_router_policy_id  (required)
{
    my $params = {
    'edge_router_policy_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_btgg9_zl_c0e' } = { 
        summary => 'Get an Edge Router Policy',
        params => $params,
        returns => 'InlineResponse2004EmbeddedEdgeRouterPolicyList',
        };
}
# @return InlineResponse2004EmbeddedEdgeRouterPolicyList
#
sub request_btgg9_zl_c0e {
    my ($self, %args) = @_;

    # verify the required parameter 'edge_router_policy_id' is set
    unless (exists $args{'edge_router_policy_id'}) {
      croak("Missing the required parameter 'edge_router_policy_id' when calling request_btgg9_zl_c0e");
    }

    # parse inputs
    my $_resource_path = '/core/v2/edge-router-policies/{edgeRouterPolicyId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'edge_router_policy_id'}) {
        my $_base_variable = "{" . "edgeRouterPolicyId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'edge_router_policy_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2004EmbeddedEdgeRouterPolicyList', $response);
    return $_response_object;
}

#
# request_e1_iex_rfv_zg
#
# Get the list of Services
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'request_e1_iex_rfv_zg' } = { 
        summary => 'Get the list of Services',
        params => $params,
        returns => 'InlineResponse2003',
        };
}
# @return InlineResponse2003
#
sub request_e1_iex_rfv_zg {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/services';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2003', $response);
    return $_response_object;
}

#
# request_f_wl_fmqidpx
#
# Create a Network
# 
# @param InlineObject $inline_object  (optional)
{
    my $params = {
    'inline_object' => {
        data_type => 'InlineObject',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_f_wl_fmqidpx' } = { 
        summary => 'Create a Network',
        params => $params,
        returns => 'InlineResponse202',
        };
}
# @return InlineResponse202
#
sub request_f_wl_fmqidpx {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/networks';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'inline_object'}) {
        $_body_data = $args{'inline_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse202', $response);
    return $_response_object;
}

#
# request_gij_vc_eo_ml_m
#
# Get the list of AppWANs
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'request_gij_vc_eo_ml_m' } = { 
        summary => 'Get the list of AppWANs',
        params => $params,
        returns => 'InlineResponse2006',
        };
}
# @return InlineResponse2006
#
sub request_gij_vc_eo_ml_m {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/app-wans';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2006', $response);
    return $_response_object;
}

#
# request_hp1b9_gi_lax
#
# Get an Edge Router Policy
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'request_hp1b9_gi_lax' } = { 
        summary => 'Get an Edge Router Policy',
        params => $params,
        returns => 'InlineResponse2004',
        };
}
# @return InlineResponse2004
#
sub request_hp1b9_gi_lax {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/edge-router-policies';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2004', $response);
    return $_response_object;
}

#
# request_iaj_vi_y_lviu
#
# Delete a Network
# 
# @param string $network_id  (required)
{
    my $params = {
    'network_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_iaj_vi_y_lviu' } = { 
        summary => 'Delete a Network',
        params => $params,
        returns => 'InlineResponse2024',
        };
}
# @return InlineResponse2024
#
sub request_iaj_vi_y_lviu {
    my ($self, %args) = @_;

    # verify the required parameter 'network_id' is set
    unless (exists $args{'network_id'}) {
      croak("Missing the required parameter 'network_id' when calling request_iaj_vi_y_lviu");
    }

    # parse inputs
    my $_resource_path = '/core/v2/networks/{networkId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'network_id'}) {
        my $_base_variable = "{" . "networkId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'network_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2024', $response);
    return $_response_object;
}

#
# request_k9aj_dj8v_us
#
# Get the list of Network Groups
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'request_k9aj_dj8v_us' } = { 
        summary => 'Get the list of Network Groups',
        params => $params,
        returns => 'InlineResponse20017',
        };
}
# @return InlineResponse20017
#
sub request_k9aj_dj8v_us {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/rest/v1/network-groups';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20017', $response);
    return $_response_object;
}

#
# request_kke_r9g_ny25
#
# Get an AppWAN
# 
# @param string $app_wan_id  (required)
{
    my $params = {
    'app_wan_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_kke_r9g_ny25' } = { 
        summary => 'Get an AppWAN',
        params => $params,
        returns => 'InlineResponse200',
        };
}
# @return InlineResponse200
#
sub request_kke_r9g_ny25 {
    my ($self, %args) = @_;

    # verify the required parameter 'app_wan_id' is set
    unless (exists $args{'app_wan_id'}) {
      croak("Missing the required parameter 'app_wan_id' when calling request_kke_r9g_ny25");
    }

    # parse inputs
    my $_resource_path = '/core/v2/app-wans/{appWanId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'app_wan_id'}) {
        my $_base_variable = "{" . "appWanId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'app_wan_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse200', $response);
    return $_response_object;
}

#
# request_lg_kx_u4ph9t
#
# Create an Edge Router Policy
# 
# @param InlineObject2 $inline_object2  (optional)
{
    my $params = {
    'inline_object2' => {
        data_type => 'InlineObject2',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_lg_kx_u4ph9t' } = { 
        summary => 'Create an Edge Router Policy',
        params => $params,
        returns => 'InlineResponse2004EmbeddedEdgeRouterPolicyList',
        };
}
# @return InlineResponse2004EmbeddedEdgeRouterPolicyList
#
sub request_lg_kx_u4ph9t {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/edge-router-policies';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'inline_object2'}) {
        $_body_data = $args{'inline_object2'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2004EmbeddedEdgeRouterPolicyList', $response);
    return $_response_object;
}

#
# request_lo_xf_q_ss8_ge
#
# Get a Network Configuration profile
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'request_lo_xf_q_ss8_ge' } = { 
        summary => 'Get a Network Configuration profile',
        params => $params,
        returns => 'InlineResponse20015',
        };
}
# @return InlineResponse20015
#
sub request_lo_xf_q_ss8_ge {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/network-configs';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20015', $response);
    return $_response_object;
}

#
# request_lopo_ftq4ih
#
# Create a Service
# 
# @param InlineObject1 $inline_object1  (optional)
{
    my $params = {
    'inline_object1' => {
        data_type => 'InlineObject1',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_lopo_ftq4ih' } = { 
        summary => 'Create a Service',
        params => $params,
        returns => 'InlineResponse2021',
        };
}
# @return InlineResponse2021
#
sub request_lopo_ftq4ih {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/services';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'inline_object1'}) {
        $_body_data = $args{'inline_object1'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2021', $response);
    return $_response_object;
}

#
# request_mpy_yt_ii_s6x
#
# Get the identity of the caller's API account
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'request_mpy_yt_ii_s6x' } = { 
        summary => 'Get the identity of the caller&#39;s API account',
        params => $params,
        returns => 'InlineResponse20016',
        };
}
# @return InlineResponse20016
#
sub request_mpy_yt_ii_s6x {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/identity/v1/api-account-identities/self';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20016', $response);
    return $_response_object;
}

#
# request_n6_gjg_plo4v
#
# Get an Organization
# 
# @param string $organization_id  (required)
{
    my $params = {
    'organization_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_n6_gjg_plo4v' } = { 
        summary => 'Get an Organization',
        params => $params,
        returns => 'InlineResponse20014',
        };
}
# @return InlineResponse20014
#
sub request_n6_gjg_plo4v {
    my ($self, %args) = @_;

    # verify the required parameter 'organization_id' is set
    unless (exists $args{'organization_id'}) {
      croak("Missing the required parameter 'organization_id' when calling request_n6_gjg_plo4v");
    }

    # parse inputs
    my $_resource_path = '/identity/v1/organizations/{organizationId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization_id'}) {
        my $_base_variable = "{" . "organizationId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20014', $response);
    return $_response_object;
}

#
# request_n_xo_v6_k2f0_q
#
# Create an AppWAN
# 
# @param InlineObject4 $inline_object4  (optional)
{
    my $params = {
    'inline_object4' => {
        data_type => 'InlineObject4',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_n_xo_v6_k2f0_q' } = { 
        summary => 'Create an AppWAN',
        params => $params,
        returns => 'InlineResponse200',
        };
}
# @return InlineResponse200
#
sub request_n_xo_v6_k2f0_q {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/app-wans';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'inline_object4'}) {
        $_body_data = $args{'inline_object4'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse200', $response);
    return $_response_object;
}

#
# request_oi_i_af_x2_v_us
#
# Get the list of Networks
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'request_oi_i_af_x2_v_us' } = { 
        summary => 'Get the list of Networks',
        params => $params,
        returns => 'InlineResponse2001',
        };
}
# @return InlineResponse2001
#
sub request_oi_i_af_x2_v_us {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/networks';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2001', $response);
    return $_response_object;
}

#
# request_p_baai_o3_b0d
#
# Delete a Service
# 
# @param string $service_id  (required)
{
    my $params = {
    'service_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_p_baai_o3_b0d' } = { 
        summary => 'Delete a Service',
        params => $params,
        returns => 'InlineResponse2022',
        };
}
# @return InlineResponse2022
#
sub request_p_baai_o3_b0d {
    my ($self, %args) = @_;

    # verify the required parameter 'service_id' is set
    unless (exists $args{'service_id'}) {
      croak("Missing the required parameter 'service_id' when calling request_p_baai_o3_b0d");
    }

    # parse inputs
    my $_resource_path = '/core/v2/services/{serviceId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json', 'application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'service_id'}) {
        my $_base_variable = "{" . "serviceId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'service_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2022', $response);
    return $_response_object;
}

#
# request_py_r6a_up5mi
#
# Create an Edge Router
# 
# @param InlineObject6 $inline_object6  (optional)
{
    my $params = {
    'inline_object6' => {
        data_type => 'InlineObject6',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_py_r6a_up5mi' } = { 
        summary => 'Create an Edge Router',
        params => $params,
        returns => 'InlineResponse2025',
        };
}
# @return InlineResponse2025
#
sub request_py_r6a_up5mi {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/edge-routers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'inline_object6'}) {
        $_body_data = $args{'inline_object6'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2025', $response);
    return $_response_object;
}

#
# request_q0b3cb_dw8_s
#
# Get the list of Posture Checks
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'request_q0b3cb_dw8_s' } = { 
        summary => 'Get the list of Posture Checks',
        params => $params,
        returns => 'InlineResponse20010',
        };
}
# @return InlineResponse20010
#
sub request_q0b3cb_dw8_s {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/posture-checks';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20010', $response);
    return $_response_object;
}

#
# request_teq_m_ge_er5_f
#
# Get a Network
# 
# @param string $network_id  (required)
{
    my $params = {
    'network_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_teq_m_ge_er5_f' } = { 
        summary => 'Get a Network',
        params => $params,
        returns => 'InlineResponse20013',
        };
}
# @return InlineResponse20013
#
sub request_teq_m_ge_er5_f {
    my ($self, %args) = @_;

    # verify the required parameter 'network_id' is set
    unless (exists $args{'network_id'}) {
      croak("Missing the required parameter 'network_id' when calling request_teq_m_ge_er5_f");
    }

    # parse inputs
    my $_resource_path = '/core/v2/networks/{networkId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'network_id'}) {
        my $_base_variable = "{" . "networkId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'network_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20013', $response);
    return $_response_object;
}

#
# request_tsyuwl_aej_k
#
# Get an Endpoint
# 
# @param string $endpoint_id  (required)
{
    my $params = {
    'endpoint_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_tsyuwl_aej_k' } = { 
        summary => 'Get an Endpoint',
        params => $params,
        returns => 'InlineResponse2007EmbeddedEndpointList',
        };
}
# @return InlineResponse2007EmbeddedEndpointList
#
sub request_tsyuwl_aej_k {
    my ($self, %args) = @_;

    # verify the required parameter 'endpoint_id' is set
    unless (exists $args{'endpoint_id'}) {
      croak("Missing the required parameter 'endpoint_id' when calling request_tsyuwl_aej_k");
    }

    # parse inputs
    my $_resource_path = '/core/v2/endpoints/{endpointId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'endpoint_id'}) {
        my $_base_variable = "{" . "endpointId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'endpoint_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2007EmbeddedEndpointList', $response);
    return $_response_object;
}

#
# request_v_iz_b1k6_uqb
#
# Change some properties of a Service
# 
# @param string $service_id  (required)
# @param InlineObject3 $inline_object3  (optional)
{
    my $params = {
    'service_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'inline_object3' => {
        data_type => 'InlineObject3',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_v_iz_b1k6_uqb' } = { 
        summary => 'Change some properties of a Service',
        params => $params,
        returns => 'InlineResponse2023',
        };
}
# @return InlineResponse2023
#
sub request_v_iz_b1k6_uqb {
    my ($self, %args) = @_;

    # verify the required parameter 'service_id' is set
    unless (exists $args{'service_id'}) {
      croak("Missing the required parameter 'service_id' when calling request_v_iz_b1k6_uqb");
    }

    # parse inputs
    my $_resource_path = '/core/v2/services/{serviceId}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'service_id'}) {
        my $_base_variable = "{" . "serviceId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'service_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'inline_object3'}) {
        $_body_data = $args{'inline_object3'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2023', $response);
    return $_response_object;
}

#
# request_ve_jcbur9i_o
#
# Get a Network Group
# 
# @param string $network_group_id  (required)
{
    my $params = {
    'network_group_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_ve_jcbur9i_o' } = { 
        summary => 'Get a Network Group',
        params => $params,
        returns => 'InlineResponse20011',
        };
}
# @return InlineResponse20011
#
sub request_ve_jcbur9i_o {
    my ($self, %args) = @_;

    # verify the required parameter 'network_group_id' is set
    unless (exists $args{'network_group_id'}) {
      croak("Missing the required parameter 'network_group_id' when calling request_ve_jcbur9i_o");
    }

    # parse inputs
    my $_resource_path = '/rest/v1/network-groups/{networkGroupId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'network_group_id'}) {
        my $_base_variable = "{" . "networkGroupId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'network_group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20011', $response);
    return $_response_object;
}

#
# request_vfua_d_me_trp
#
# Get the list of data centers
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'request_vfua_d_me_trp' } = { 
        summary => 'Get the list of data centers',
        params => $params,
        returns => 'InlineResponse2002',
        };
}
# @return InlineResponse2002
#
sub request_vfua_d_me_trp {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/data-centers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2002', $response);
    return $_response_object;
}

#
# request_y_lsf4m9_ttt
#
# Get a Service
# 
# @param string $service_id  (required)
{
    my $params = {
    'service_id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_y_lsf4m9_ttt' } = { 
        summary => 'Get a Service',
        params => $params,
        returns => 'InlineResponse2005',
        };
}
# @return InlineResponse2005
#
sub request_y_lsf4m9_ttt {
    my ($self, %args) = @_;

    # verify the required parameter 'service_id' is set
    unless (exists $args{'service_id'}) {
      croak("Missing the required parameter 'service_id' when calling request_y_lsf4m9_ttt");
    }

    # parse inputs
    my $_resource_path = '/core/v2/services/{serviceId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'service_id'}) {
        my $_base_variable = "{" . "serviceId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'service_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse2005', $response);
    return $_response_object;
}

#
# request_yhz_d_aw1_ks4
#
# Get an Edge Router
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'request_yhz_d_aw1_ks4' } = { 
        summary => 'Get an Edge Router',
        params => $params,
        returns => 'InlineResponse20018',
        };
}
# @return InlineResponse20018
#
sub request_yhz_d_aw1_ks4 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/core/v2/edge-routers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/hal+json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse20018', $response);
    return $_response_object;
}

1;
