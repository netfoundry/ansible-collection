=begin comment

untitled API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 5170

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::InlineResponse2002EmbeddedDataCenters;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use WWW::OpenAPIClient::Object::AnyType;
use WWW::OpenAPIClient::Object::InlineResponse2002EmbeddedLinks;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

untitled API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 5170

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new { 
    my ($class, %args) = @_; 

    my $self = bless {}, $class;

    $self->init(%args);
    
    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => '',
                                  class => 'InlineResponse2002EmbeddedDataCenters',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'city' => {
        datatype => 'AnyType',
        base_name => 'city',
        description => '',
        format => '',
        read_only => '',
            },
    'continent_code' => {
        datatype => 'AnyType',
        base_name => 'continentCode',
        description => '',
        format => '',
        read_only => '',
            },
    'state_code' => {
        datatype => 'AnyType',
        base_name => 'stateCode',
        description => '',
        format => '',
        read_only => '',
            },
    'lng' => {
        datatype => 'double',
        base_name => 'lng',
        description => '',
        format => '',
        read_only => '',
            },
    'provider' => {
        datatype => 'string',
        base_name => 'provider',
        description => '',
        format => '',
        read_only => '',
            },
    'state_name' => {
        datatype => 'AnyType',
        base_name => 'stateName',
        description => '',
        format => '',
        read_only => '',
            },
    'continent_name' => {
        datatype => 'AnyType',
        base_name => 'continentName',
        description => '',
        format => '',
        read_only => '',
            },
    'isp' => {
        datatype => 'AnyType',
        base_name => 'isp',
        description => '',
        format => '',
        read_only => '',
            },
    'location_code' => {
        datatype => 'string',
        base_name => 'locationCode',
        description => '',
        format => '',
        read_only => '',
            },
    'country_name' => {
        datatype => 'AnyType',
        base_name => 'countryName',
        description => '',
        format => '',
        read_only => '',
            },
    'id' => {
        datatype => 'string',
        base_name => 'id',
        description => '',
        format => '',
        read_only => '',
            },
    'country_code' => {
        datatype => 'AnyType',
        base_name => 'countryCode',
        description => '',
        format => '',
        read_only => '',
            },
    'address' => {
        datatype => 'AnyType',
        base_name => 'address',
        description => '',
        format => '',
        read_only => '',
            },
    'location_name' => {
        datatype => 'string',
        base_name => 'locationName',
        description => '',
        format => '',
        read_only => '',
            },
    'lat' => {
        datatype => 'double',
        base_name => 'lat',
        description => '',
        format => '',
        read_only => '',
            },
    '_links' => {
        datatype => 'InlineResponse2002EmbeddedLinks',
        base_name => '_links',
        description => '',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'city' => 'AnyType',
    'continent_code' => 'AnyType',
    'state_code' => 'AnyType',
    'lng' => 'double',
    'provider' => 'string',
    'state_name' => 'AnyType',
    'continent_name' => 'AnyType',
    'isp' => 'AnyType',
    'location_code' => 'string',
    'country_name' => 'AnyType',
    'id' => 'string',
    'country_code' => 'AnyType',
    'address' => 'AnyType',
    'location_name' => 'string',
    'lat' => 'double',
    '_links' => 'InlineResponse2002EmbeddedLinks'
} );

__PACKAGE__->attribute_map( {
    'city' => 'city',
    'continent_code' => 'continentCode',
    'state_code' => 'stateCode',
    'lng' => 'lng',
    'provider' => 'provider',
    'state_name' => 'stateName',
    'continent_name' => 'continentName',
    'isp' => 'isp',
    'location_code' => 'locationCode',
    'country_name' => 'countryName',
    'id' => 'id',
    'country_code' => 'countryCode',
    'address' => 'address',
    'location_name' => 'locationName',
    'lat' => 'lat',
    '_links' => '_links'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
