# coding: utf-8

"""
    untitled API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5170
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse2001EmbeddedLinks(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'services': 'InlineResponse200LinksSelf',
        'networks': 'InlineResponse200LinksNetwork',
        'app_wans': 'InlineResponse200LinksSelf',
        'endpoints': 'InlineResponse200LinksSelf',
        'certificate_authorities': 'InlineResponse200LinksSelf',
        '_self': 'InlineResponse200LinksSelf',
        'process_executions': 'InlineResponse200LinksNetwork',
        'network_controllers': 'InlineResponse200LinksSelf',
        'posture_checks': 'InlineResponse200LinksSelf',
        'edge_routers': 'InlineResponse200LinksSelf',
        'edge_router_policies': 'InlineResponse200LinksSelf'
    }

    attribute_map = {
        'services': 'services',
        'networks': 'networks',
        'app_wans': 'app-wans',
        'endpoints': 'endpoints',
        'certificate_authorities': 'certificate-authorities',
        '_self': 'self',
        'process_executions': 'process-executions',
        'network_controllers': 'network-controllers',
        'posture_checks': 'posture-checks',
        'edge_routers': 'edge-routers',
        'edge_router_policies': 'edge-router-policies'
    }

    def __init__(self, services=None, networks=None, app_wans=None, endpoints=None, certificate_authorities=None, _self=None, process_executions=None, network_controllers=None, posture_checks=None, edge_routers=None, edge_router_policies=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2001EmbeddedLinks - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._services = None
        self._networks = None
        self._app_wans = None
        self._endpoints = None
        self._certificate_authorities = None
        self.__self = None
        self._process_executions = None
        self._network_controllers = None
        self._posture_checks = None
        self._edge_routers = None
        self._edge_router_policies = None
        self.discriminator = None

        self.services = services
        self.networks = networks
        self.app_wans = app_wans
        self.endpoints = endpoints
        self.certificate_authorities = certificate_authorities
        self._self = _self
        self.process_executions = process_executions
        self.network_controllers = network_controllers
        self.posture_checks = posture_checks
        self.edge_routers = edge_routers
        self.edge_router_policies = edge_router_policies

    @property
    def services(self):
        """Gets the services of this InlineResponse2001EmbeddedLinks.  # noqa: E501


        :return: The services of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :rtype: InlineResponse200LinksSelf
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this InlineResponse2001EmbeddedLinks.


        :param services: The services of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :type: InlineResponse200LinksSelf
        """
        if self.local_vars_configuration.client_side_validation and services is None:  # noqa: E501
            raise ValueError("Invalid value for `services`, must not be `None`")  # noqa: E501

        self._services = services

    @property
    def networks(self):
        """Gets the networks of this InlineResponse2001EmbeddedLinks.  # noqa: E501


        :return: The networks of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :rtype: InlineResponse200LinksNetwork
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this InlineResponse2001EmbeddedLinks.


        :param networks: The networks of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :type: InlineResponse200LinksNetwork
        """
        if self.local_vars_configuration.client_side_validation and networks is None:  # noqa: E501
            raise ValueError("Invalid value for `networks`, must not be `None`")  # noqa: E501

        self._networks = networks

    @property
    def app_wans(self):
        """Gets the app_wans of this InlineResponse2001EmbeddedLinks.  # noqa: E501


        :return: The app_wans of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :rtype: InlineResponse200LinksSelf
        """
        return self._app_wans

    @app_wans.setter
    def app_wans(self, app_wans):
        """Sets the app_wans of this InlineResponse2001EmbeddedLinks.


        :param app_wans: The app_wans of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :type: InlineResponse200LinksSelf
        """
        if self.local_vars_configuration.client_side_validation and app_wans is None:  # noqa: E501
            raise ValueError("Invalid value for `app_wans`, must not be `None`")  # noqa: E501

        self._app_wans = app_wans

    @property
    def endpoints(self):
        """Gets the endpoints of this InlineResponse2001EmbeddedLinks.  # noqa: E501


        :return: The endpoints of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :rtype: InlineResponse200LinksSelf
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this InlineResponse2001EmbeddedLinks.


        :param endpoints: The endpoints of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :type: InlineResponse200LinksSelf
        """
        if self.local_vars_configuration.client_side_validation and endpoints is None:  # noqa: E501
            raise ValueError("Invalid value for `endpoints`, must not be `None`")  # noqa: E501

        self._endpoints = endpoints

    @property
    def certificate_authorities(self):
        """Gets the certificate_authorities of this InlineResponse2001EmbeddedLinks.  # noqa: E501


        :return: The certificate_authorities of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :rtype: InlineResponse200LinksSelf
        """
        return self._certificate_authorities

    @certificate_authorities.setter
    def certificate_authorities(self, certificate_authorities):
        """Sets the certificate_authorities of this InlineResponse2001EmbeddedLinks.


        :param certificate_authorities: The certificate_authorities of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :type: InlineResponse200LinksSelf
        """
        if self.local_vars_configuration.client_side_validation and certificate_authorities is None:  # noqa: E501
            raise ValueError("Invalid value for `certificate_authorities`, must not be `None`")  # noqa: E501

        self._certificate_authorities = certificate_authorities

    @property
    def _self(self):
        """Gets the _self of this InlineResponse2001EmbeddedLinks.  # noqa: E501


        :return: The _self of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :rtype: InlineResponse200LinksSelf
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this InlineResponse2001EmbeddedLinks.


        :param _self: The _self of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :type: InlineResponse200LinksSelf
        """
        if self.local_vars_configuration.client_side_validation and _self is None:  # noqa: E501
            raise ValueError("Invalid value for `_self`, must not be `None`")  # noqa: E501

        self.__self = _self

    @property
    def process_executions(self):
        """Gets the process_executions of this InlineResponse2001EmbeddedLinks.  # noqa: E501


        :return: The process_executions of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :rtype: InlineResponse200LinksNetwork
        """
        return self._process_executions

    @process_executions.setter
    def process_executions(self, process_executions):
        """Sets the process_executions of this InlineResponse2001EmbeddedLinks.


        :param process_executions: The process_executions of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :type: InlineResponse200LinksNetwork
        """
        if self.local_vars_configuration.client_side_validation and process_executions is None:  # noqa: E501
            raise ValueError("Invalid value for `process_executions`, must not be `None`")  # noqa: E501

        self._process_executions = process_executions

    @property
    def network_controllers(self):
        """Gets the network_controllers of this InlineResponse2001EmbeddedLinks.  # noqa: E501


        :return: The network_controllers of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :rtype: InlineResponse200LinksSelf
        """
        return self._network_controllers

    @network_controllers.setter
    def network_controllers(self, network_controllers):
        """Sets the network_controllers of this InlineResponse2001EmbeddedLinks.


        :param network_controllers: The network_controllers of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :type: InlineResponse200LinksSelf
        """
        if self.local_vars_configuration.client_side_validation and network_controllers is None:  # noqa: E501
            raise ValueError("Invalid value for `network_controllers`, must not be `None`")  # noqa: E501

        self._network_controllers = network_controllers

    @property
    def posture_checks(self):
        """Gets the posture_checks of this InlineResponse2001EmbeddedLinks.  # noqa: E501


        :return: The posture_checks of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :rtype: InlineResponse200LinksSelf
        """
        return self._posture_checks

    @posture_checks.setter
    def posture_checks(self, posture_checks):
        """Sets the posture_checks of this InlineResponse2001EmbeddedLinks.


        :param posture_checks: The posture_checks of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :type: InlineResponse200LinksSelf
        """
        if self.local_vars_configuration.client_side_validation and posture_checks is None:  # noqa: E501
            raise ValueError("Invalid value for `posture_checks`, must not be `None`")  # noqa: E501

        self._posture_checks = posture_checks

    @property
    def edge_routers(self):
        """Gets the edge_routers of this InlineResponse2001EmbeddedLinks.  # noqa: E501


        :return: The edge_routers of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :rtype: InlineResponse200LinksSelf
        """
        return self._edge_routers

    @edge_routers.setter
    def edge_routers(self, edge_routers):
        """Sets the edge_routers of this InlineResponse2001EmbeddedLinks.


        :param edge_routers: The edge_routers of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :type: InlineResponse200LinksSelf
        """
        if self.local_vars_configuration.client_side_validation and edge_routers is None:  # noqa: E501
            raise ValueError("Invalid value for `edge_routers`, must not be `None`")  # noqa: E501

        self._edge_routers = edge_routers

    @property
    def edge_router_policies(self):
        """Gets the edge_router_policies of this InlineResponse2001EmbeddedLinks.  # noqa: E501


        :return: The edge_router_policies of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :rtype: InlineResponse200LinksSelf
        """
        return self._edge_router_policies

    @edge_router_policies.setter
    def edge_router_policies(self, edge_router_policies):
        """Sets the edge_router_policies of this InlineResponse2001EmbeddedLinks.


        :param edge_router_policies: The edge_router_policies of this InlineResponse2001EmbeddedLinks.  # noqa: E501
        :type: InlineResponse200LinksSelf
        """
        if self.local_vars_configuration.client_side_validation and edge_router_policies is None:  # noqa: E501
            raise ValueError("Invalid value for `edge_router_policies`, must not be `None`")  # noqa: E501

        self._edge_router_policies = edge_router_policies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001EmbeddedLinks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2001EmbeddedLinks):
            return True

        return self.to_dict() != other.to_dict()
