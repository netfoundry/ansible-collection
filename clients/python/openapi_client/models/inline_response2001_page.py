# coding: utf-8

"""
    untitled API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5227
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse2001Page(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'number': 'float',
        'size': 'float',
        'total_elements': 'float',
        'total_pages': 'float'
    }

    attribute_map = {
        'number': 'number',
        'size': 'size',
        'total_elements': 'totalElements',
        'total_pages': 'totalPages'
    }

    def __init__(self, number=None, size=None, total_elements=None, total_pages=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2001Page - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._number = None
        self._size = None
        self._total_elements = None
        self._total_pages = None
        self.discriminator = None

        self.number = number
        self.size = size
        self.total_elements = total_elements
        self.total_pages = total_pages

    @property
    def number(self):
        """Gets the number of this InlineResponse2001Page.  # noqa: E501


        :return: The number of this InlineResponse2001Page.  # noqa: E501
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this InlineResponse2001Page.


        :param number: The number of this InlineResponse2001Page.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and number is None:  # noqa: E501
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def size(self):
        """Gets the size of this InlineResponse2001Page.  # noqa: E501


        :return: The size of this InlineResponse2001Page.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this InlineResponse2001Page.


        :param size: The size of this InlineResponse2001Page.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and size is None:  # noqa: E501
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def total_elements(self):
        """Gets the total_elements of this InlineResponse2001Page.  # noqa: E501


        :return: The total_elements of this InlineResponse2001Page.  # noqa: E501
        :rtype: float
        """
        return self._total_elements

    @total_elements.setter
    def total_elements(self, total_elements):
        """Sets the total_elements of this InlineResponse2001Page.


        :param total_elements: The total_elements of this InlineResponse2001Page.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and total_elements is None:  # noqa: E501
            raise ValueError("Invalid value for `total_elements`, must not be `None`")  # noqa: E501

        self._total_elements = total_elements

    @property
    def total_pages(self):
        """Gets the total_pages of this InlineResponse2001Page.  # noqa: E501


        :return: The total_pages of this InlineResponse2001Page.  # noqa: E501
        :rtype: float
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this InlineResponse2001Page.


        :param total_pages: The total_pages of this InlineResponse2001Page.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and total_pages is None:  # noqa: E501
            raise ValueError("Invalid value for `total_pages`, must not be `None`")  # noqa: E501

        self._total_pages = total_pages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001Page):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2001Page):
            return True

        return self.to_dict() != other.to_dict()
