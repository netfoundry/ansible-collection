# coding: utf-8

"""
    untitled API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5229
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'size': 'str',
        'location_code': 'str',
        'product_version': 'str',
        'network_group_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'size': 'size',
        'location_code': 'locationCode',
        'product_version': 'productVersion',
        'network_group_id': 'networkGroupId'
    }

    def __init__(self, name=None, size=None, location_code=None, product_version=None, network_group_id=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._size = None
        self._location_code = None
        self._product_version = None
        self._network_group_id = None
        self.discriminator = None

        self.name = name
        self.size = size
        self.location_code = location_code
        self.product_version = product_version
        self.network_group_id = network_group_id

    @property
    def name(self):
        """Gets the name of this InlineObject.  # noqa: E501


        :return: The name of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineObject.


        :param name: The name of this InlineObject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def size(self):
        """Gets the size of this InlineObject.  # noqa: E501


        :return: The size of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this InlineObject.


        :param size: The size of this InlineObject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and size is None:  # noqa: E501
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def location_code(self):
        """Gets the location_code of this InlineObject.  # noqa: E501


        :return: The location_code of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._location_code

    @location_code.setter
    def location_code(self, location_code):
        """Sets the location_code of this InlineObject.


        :param location_code: The location_code of this InlineObject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and location_code is None:  # noqa: E501
            raise ValueError("Invalid value for `location_code`, must not be `None`")  # noqa: E501

        self._location_code = location_code

    @property
    def product_version(self):
        """Gets the product_version of this InlineObject.  # noqa: E501


        :return: The product_version of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._product_version

    @product_version.setter
    def product_version(self, product_version):
        """Sets the product_version of this InlineObject.


        :param product_version: The product_version of this InlineObject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product_version is None:  # noqa: E501
            raise ValueError("Invalid value for `product_version`, must not be `None`")  # noqa: E501

        self._product_version = product_version

    @property
    def network_group_id(self):
        """Gets the network_group_id of this InlineObject.  # noqa: E501


        :return: The network_group_id of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._network_group_id

    @network_group_id.setter
    def network_group_id(self, network_group_id):
        """Sets the network_group_id of this InlineObject.


        :param network_group_id: The network_group_id of this InlineObject.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and network_group_id is None:  # noqa: E501
            raise ValueError("Invalid value for `network_group_id`, must not be `None`")  # noqa: E501

        self._network_group_id = network_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject):
            return True

        return self.to_dict() != other.to_dict()
