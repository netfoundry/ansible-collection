# coding: utf-8

"""
    untitled API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5227
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse2003EmbeddedModelServerEgress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'host': 'str',
        'dial_intercept_address': 'object',
        'dial_intercept_port': 'object',
        'port': 'float',
        'dial_intercept_protocol': 'bool',
        'address': 'str',
        'protocol': 'object'
    }

    attribute_map = {
        'host': 'host',
        'dial_intercept_address': 'dialInterceptAddress',
        'dial_intercept_port': 'dialInterceptPort',
        'port': 'port',
        'dial_intercept_protocol': 'dialInterceptProtocol',
        'address': 'address',
        'protocol': 'protocol'
    }

    def __init__(self, host=None, dial_intercept_address=None, dial_intercept_port=None, port=None, dial_intercept_protocol=None, address=None, protocol=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2003EmbeddedModelServerEgress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._host = None
        self._dial_intercept_address = None
        self._dial_intercept_port = None
        self._port = None
        self._dial_intercept_protocol = None
        self._address = None
        self._protocol = None
        self.discriminator = None

        if host is not None:
            self.host = host
        if dial_intercept_address is not None:
            self.dial_intercept_address = dial_intercept_address
        if dial_intercept_port is not None:
            self.dial_intercept_port = dial_intercept_port
        self.port = port
        if dial_intercept_protocol is not None:
            self.dial_intercept_protocol = dial_intercept_protocol
        if address is not None:
            self.address = address
        self.protocol = protocol

    @property
    def host(self):
        """Gets the host of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501


        :return: The host of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this InlineResponse2003EmbeddedModelServerEgress.


        :param host: The host of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def dial_intercept_address(self):
        """Gets the dial_intercept_address of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501


        :return: The dial_intercept_address of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501
        :rtype: object
        """
        return self._dial_intercept_address

    @dial_intercept_address.setter
    def dial_intercept_address(self, dial_intercept_address):
        """Sets the dial_intercept_address of this InlineResponse2003EmbeddedModelServerEgress.


        :param dial_intercept_address: The dial_intercept_address of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501
        :type: object
        """

        self._dial_intercept_address = dial_intercept_address

    @property
    def dial_intercept_port(self):
        """Gets the dial_intercept_port of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501


        :return: The dial_intercept_port of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501
        :rtype: object
        """
        return self._dial_intercept_port

    @dial_intercept_port.setter
    def dial_intercept_port(self, dial_intercept_port):
        """Sets the dial_intercept_port of this InlineResponse2003EmbeddedModelServerEgress.


        :param dial_intercept_port: The dial_intercept_port of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501
        :type: object
        """

        self._dial_intercept_port = dial_intercept_port

    @property
    def port(self):
        """Gets the port of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501


        :return: The port of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501
        :rtype: float
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this InlineResponse2003EmbeddedModelServerEgress.


        :param port: The port of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and port is None:  # noqa: E501
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def dial_intercept_protocol(self):
        """Gets the dial_intercept_protocol of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501


        :return: The dial_intercept_protocol of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501
        :rtype: bool
        """
        return self._dial_intercept_protocol

    @dial_intercept_protocol.setter
    def dial_intercept_protocol(self, dial_intercept_protocol):
        """Sets the dial_intercept_protocol of this InlineResponse2003EmbeddedModelServerEgress.


        :param dial_intercept_protocol: The dial_intercept_protocol of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501
        :type: bool
        """

        self._dial_intercept_protocol = dial_intercept_protocol

    @property
    def address(self):
        """Gets the address of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501


        :return: The address of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InlineResponse2003EmbeddedModelServerEgress.


        :param address: The address of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def protocol(self):
        """Gets the protocol of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501


        :return: The protocol of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501
        :rtype: object
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this InlineResponse2003EmbeddedModelServerEgress.


        :param protocol: The protocol of this InlineResponse2003EmbeddedModelServerEgress.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and protocol is None:  # noqa: E501
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003EmbeddedModelServerEgress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2003EmbeddedModelServerEgress):
            return True

        return self.to_dict() != other.to_dict()
