# coding: utf-8

"""
    untitled API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5170
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse2002EmbeddedDataCenters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'city': 'object',
        'continent_code': 'object',
        'state_code': 'object',
        'lng': 'float',
        'provider': 'str',
        'state_name': 'object',
        'continent_name': 'object',
        'isp': 'object',
        'location_code': 'str',
        'country_name': 'object',
        'id': 'str',
        'country_code': 'object',
        'address': 'object',
        'location_name': 'str',
        'lat': 'float',
        'links': 'InlineResponse2002EmbeddedLinks'
    }

    attribute_map = {
        'city': 'city',
        'continent_code': 'continentCode',
        'state_code': 'stateCode',
        'lng': 'lng',
        'provider': 'provider',
        'state_name': 'stateName',
        'continent_name': 'continentName',
        'isp': 'isp',
        'location_code': 'locationCode',
        'country_name': 'countryName',
        'id': 'id',
        'country_code': 'countryCode',
        'address': 'address',
        'location_name': 'locationName',
        'lat': 'lat',
        'links': '_links'
    }

    def __init__(self, city=None, continent_code=None, state_code=None, lng=None, provider=None, state_name=None, continent_name=None, isp=None, location_code=None, country_name=None, id=None, country_code=None, address=None, location_name=None, lat=None, links=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2002EmbeddedDataCenters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._city = None
        self._continent_code = None
        self._state_code = None
        self._lng = None
        self._provider = None
        self._state_name = None
        self._continent_name = None
        self._isp = None
        self._location_code = None
        self._country_name = None
        self._id = None
        self._country_code = None
        self._address = None
        self._location_name = None
        self._lat = None
        self._links = None
        self.discriminator = None

        self.city = city
        self.continent_code = continent_code
        self.state_code = state_code
        self.lng = lng
        self.provider = provider
        self.state_name = state_name
        self.continent_name = continent_name
        self.isp = isp
        self.location_code = location_code
        self.country_name = country_name
        self.id = id
        self.country_code = country_code
        self.address = address
        self.location_name = location_name
        self.lat = lat
        self.links = links

    @property
    def city(self):
        """Gets the city of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The city of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: object
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this InlineResponse2002EmbeddedDataCenters.


        :param city: The city of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and city is None:  # noqa: E501
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def continent_code(self):
        """Gets the continent_code of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The continent_code of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: object
        """
        return self._continent_code

    @continent_code.setter
    def continent_code(self, continent_code):
        """Sets the continent_code of this InlineResponse2002EmbeddedDataCenters.


        :param continent_code: The continent_code of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and continent_code is None:  # noqa: E501
            raise ValueError("Invalid value for `continent_code`, must not be `None`")  # noqa: E501

        self._continent_code = continent_code

    @property
    def state_code(self):
        """Gets the state_code of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The state_code of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: object
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this InlineResponse2002EmbeddedDataCenters.


        :param state_code: The state_code of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and state_code is None:  # noqa: E501
            raise ValueError("Invalid value for `state_code`, must not be `None`")  # noqa: E501

        self._state_code = state_code

    @property
    def lng(self):
        """Gets the lng of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The lng of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this InlineResponse2002EmbeddedDataCenters.


        :param lng: The lng of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and lng is None:  # noqa: E501
            raise ValueError("Invalid value for `lng`, must not be `None`")  # noqa: E501

        self._lng = lng

    @property
    def provider(self):
        """Gets the provider of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The provider of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this InlineResponse2002EmbeddedDataCenters.


        :param provider: The provider of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and provider is None:  # noqa: E501
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def state_name(self):
        """Gets the state_name of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The state_name of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: object
        """
        return self._state_name

    @state_name.setter
    def state_name(self, state_name):
        """Sets the state_name of this InlineResponse2002EmbeddedDataCenters.


        :param state_name: The state_name of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and state_name is None:  # noqa: E501
            raise ValueError("Invalid value for `state_name`, must not be `None`")  # noqa: E501

        self._state_name = state_name

    @property
    def continent_name(self):
        """Gets the continent_name of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The continent_name of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: object
        """
        return self._continent_name

    @continent_name.setter
    def continent_name(self, continent_name):
        """Sets the continent_name of this InlineResponse2002EmbeddedDataCenters.


        :param continent_name: The continent_name of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and continent_name is None:  # noqa: E501
            raise ValueError("Invalid value for `continent_name`, must not be `None`")  # noqa: E501

        self._continent_name = continent_name

    @property
    def isp(self):
        """Gets the isp of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The isp of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: object
        """
        return self._isp

    @isp.setter
    def isp(self, isp):
        """Sets the isp of this InlineResponse2002EmbeddedDataCenters.


        :param isp: The isp of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and isp is None:  # noqa: E501
            raise ValueError("Invalid value for `isp`, must not be `None`")  # noqa: E501

        self._isp = isp

    @property
    def location_code(self):
        """Gets the location_code of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The location_code of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: str
        """
        return self._location_code

    @location_code.setter
    def location_code(self, location_code):
        """Sets the location_code of this InlineResponse2002EmbeddedDataCenters.


        :param location_code: The location_code of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and location_code is None:  # noqa: E501
            raise ValueError("Invalid value for `location_code`, must not be `None`")  # noqa: E501

        self._location_code = location_code

    @property
    def country_name(self):
        """Gets the country_name of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The country_name of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: object
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this InlineResponse2002EmbeddedDataCenters.


        :param country_name: The country_name of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and country_name is None:  # noqa: E501
            raise ValueError("Invalid value for `country_name`, must not be `None`")  # noqa: E501

        self._country_name = country_name

    @property
    def id(self):
        """Gets the id of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The id of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2002EmbeddedDataCenters.


        :param id: The id of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def country_code(self):
        """Gets the country_code of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The country_code of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: object
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this InlineResponse2002EmbeddedDataCenters.


        :param country_code: The country_code of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and country_code is None:  # noqa: E501
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def address(self):
        """Gets the address of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The address of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: object
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InlineResponse2002EmbeddedDataCenters.


        :param address: The address of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and address is None:  # noqa: E501
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def location_name(self):
        """Gets the location_name of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The location_name of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this InlineResponse2002EmbeddedDataCenters.


        :param location_name: The location_name of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and location_name is None:  # noqa: E501
            raise ValueError("Invalid value for `location_name`, must not be `None`")  # noqa: E501

        self._location_name = location_name

    @property
    def lat(self):
        """Gets the lat of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The lat of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this InlineResponse2002EmbeddedDataCenters.


        :param lat: The lat of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and lat is None:  # noqa: E501
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def links(self):
        """Gets the links of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501


        :return: The links of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :rtype: InlineResponse2002EmbeddedLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this InlineResponse2002EmbeddedDataCenters.


        :param links: The links of this InlineResponse2002EmbeddedDataCenters.  # noqa: E501
        :type: InlineResponse2002EmbeddedLinks
        """
        if self.local_vars_configuration.client_side_validation and links is None:  # noqa: E501
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002EmbeddedDataCenters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2002EmbeddedDataCenters):
            return True

        return self.to_dict() != other.to_dict()
