# coding: utf-8

"""
    untitled API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5170
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineResponse2024NetworkController(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deleted_at': 'object',
        'network_id': 'str',
        'name': 'str',
        'updated_at': 'str',
        'provider': 'str',
        'user_data': 'object',
        'owner_identity_id': 'object',
        'domain_name': 'str',
        'provider_id': 'str',
        'id': 'str',
        'port': 'float',
        'ip_address': 'str',
        'status': 'str',
        'host_id': 'str',
        'created_at': 'str',
        'deleted_by': 'object',
        'location_metadata_id': 'str',
        'data_center_id': 'str'
    }

    attribute_map = {
        'deleted_at': 'deletedAt',
        'network_id': 'networkId',
        'name': 'name',
        'updated_at': 'updatedAt',
        'provider': 'provider',
        'user_data': 'userData',
        'owner_identity_id': 'ownerIdentityId',
        'domain_name': 'domainName',
        'provider_id': 'providerId',
        'id': 'id',
        'port': 'port',
        'ip_address': 'ipAddress',
        'status': 'status',
        'host_id': 'hostId',
        'created_at': 'createdAt',
        'deleted_by': 'deletedBy',
        'location_metadata_id': 'locationMetadataId',
        'data_center_id': 'dataCenterId'
    }

    def __init__(self, deleted_at=None, network_id=None, name=None, updated_at=None, provider=None, user_data=None, owner_identity_id=None, domain_name=None, provider_id=None, id=None, port=None, ip_address=None, status=None, host_id=None, created_at=None, deleted_by=None, location_metadata_id=None, data_center_id=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse2024NetworkController - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deleted_at = None
        self._network_id = None
        self._name = None
        self._updated_at = None
        self._provider = None
        self._user_data = None
        self._owner_identity_id = None
        self._domain_name = None
        self._provider_id = None
        self._id = None
        self._port = None
        self._ip_address = None
        self._status = None
        self._host_id = None
        self._created_at = None
        self._deleted_by = None
        self._location_metadata_id = None
        self._data_center_id = None
        self.discriminator = None

        self.deleted_at = deleted_at
        self.network_id = network_id
        self.name = name
        self.updated_at = updated_at
        self.provider = provider
        self.user_data = user_data
        self.owner_identity_id = owner_identity_id
        self.domain_name = domain_name
        self.provider_id = provider_id
        self.id = id
        self.port = port
        self.ip_address = ip_address
        self.status = status
        self.host_id = host_id
        self.created_at = created_at
        self.deleted_by = deleted_by
        self.location_metadata_id = location_metadata_id
        self.data_center_id = data_center_id

    @property
    def deleted_at(self):
        """Gets the deleted_at of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The deleted_at of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: object
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this InlineResponse2024NetworkController.


        :param deleted_at: The deleted_at of this InlineResponse2024NetworkController.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and deleted_at is None:  # noqa: E501
            raise ValueError("Invalid value for `deleted_at`, must not be `None`")  # noqa: E501

        self._deleted_at = deleted_at

    @property
    def network_id(self):
        """Gets the network_id of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The network_id of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this InlineResponse2024NetworkController.


        :param network_id: The network_id of this InlineResponse2024NetworkController.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and network_id is None:  # noqa: E501
            raise ValueError("Invalid value for `network_id`, must not be `None`")  # noqa: E501

        self._network_id = network_id

    @property
    def name(self):
        """Gets the name of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The name of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2024NetworkController.


        :param name: The name of this InlineResponse2024NetworkController.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The updated_at of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse2024NetworkController.


        :param updated_at: The updated_at of this InlineResponse2024NetworkController.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def provider(self):
        """Gets the provider of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The provider of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this InlineResponse2024NetworkController.


        :param provider: The provider of this InlineResponse2024NetworkController.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and provider is None:  # noqa: E501
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def user_data(self):
        """Gets the user_data of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The user_data of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: object
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this InlineResponse2024NetworkController.


        :param user_data: The user_data of this InlineResponse2024NetworkController.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and user_data is None:  # noqa: E501
            raise ValueError("Invalid value for `user_data`, must not be `None`")  # noqa: E501

        self._user_data = user_data

    @property
    def owner_identity_id(self):
        """Gets the owner_identity_id of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The owner_identity_id of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: object
        """
        return self._owner_identity_id

    @owner_identity_id.setter
    def owner_identity_id(self, owner_identity_id):
        """Sets the owner_identity_id of this InlineResponse2024NetworkController.


        :param owner_identity_id: The owner_identity_id of this InlineResponse2024NetworkController.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and owner_identity_id is None:  # noqa: E501
            raise ValueError("Invalid value for `owner_identity_id`, must not be `None`")  # noqa: E501

        self._owner_identity_id = owner_identity_id

    @property
    def domain_name(self):
        """Gets the domain_name of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The domain_name of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this InlineResponse2024NetworkController.


        :param domain_name: The domain_name of this InlineResponse2024NetworkController.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and domain_name is None:  # noqa: E501
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501

        self._domain_name = domain_name

    @property
    def provider_id(self):
        """Gets the provider_id of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The provider_id of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this InlineResponse2024NetworkController.


        :param provider_id: The provider_id of this InlineResponse2024NetworkController.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and provider_id is None:  # noqa: E501
            raise ValueError("Invalid value for `provider_id`, must not be `None`")  # noqa: E501

        self._provider_id = provider_id

    @property
    def id(self):
        """Gets the id of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The id of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2024NetworkController.


        :param id: The id of this InlineResponse2024NetworkController.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def port(self):
        """Gets the port of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The port of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: float
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this InlineResponse2024NetworkController.


        :param port: The port of this InlineResponse2024NetworkController.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and port is None:  # noqa: E501
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def ip_address(self):
        """Gets the ip_address of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The ip_address of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this InlineResponse2024NetworkController.


        :param ip_address: The ip_address of this InlineResponse2024NetworkController.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and ip_address is None:  # noqa: E501
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def status(self):
        """Gets the status of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The status of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2024NetworkController.


        :param status: The status of this InlineResponse2024NetworkController.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def host_id(self):
        """Gets the host_id of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The host_id of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this InlineResponse2024NetworkController.


        :param host_id: The host_id of this InlineResponse2024NetworkController.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and host_id is None:  # noqa: E501
            raise ValueError("Invalid value for `host_id`, must not be `None`")  # noqa: E501

        self._host_id = host_id

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The created_at of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse2024NetworkController.


        :param created_at: The created_at of this InlineResponse2024NetworkController.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def deleted_by(self):
        """Gets the deleted_by of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The deleted_by of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: object
        """
        return self._deleted_by

    @deleted_by.setter
    def deleted_by(self, deleted_by):
        """Sets the deleted_by of this InlineResponse2024NetworkController.


        :param deleted_by: The deleted_by of this InlineResponse2024NetworkController.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and deleted_by is None:  # noqa: E501
            raise ValueError("Invalid value for `deleted_by`, must not be `None`")  # noqa: E501

        self._deleted_by = deleted_by

    @property
    def location_metadata_id(self):
        """Gets the location_metadata_id of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The location_metadata_id of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: str
        """
        return self._location_metadata_id

    @location_metadata_id.setter
    def location_metadata_id(self, location_metadata_id):
        """Sets the location_metadata_id of this InlineResponse2024NetworkController.


        :param location_metadata_id: The location_metadata_id of this InlineResponse2024NetworkController.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and location_metadata_id is None:  # noqa: E501
            raise ValueError("Invalid value for `location_metadata_id`, must not be `None`")  # noqa: E501

        self._location_metadata_id = location_metadata_id

    @property
    def data_center_id(self):
        """Gets the data_center_id of this InlineResponse2024NetworkController.  # noqa: E501


        :return: The data_center_id of this InlineResponse2024NetworkController.  # noqa: E501
        :rtype: str
        """
        return self._data_center_id

    @data_center_id.setter
    def data_center_id(self, data_center_id):
        """Sets the data_center_id of this InlineResponse2024NetworkController.


        :param data_center_id: The data_center_id of this InlineResponse2024NetworkController.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and data_center_id is None:  # noqa: E501
            raise ValueError("Invalid value for `data_center_id`, must not be `None`")  # noqa: E501

        self._data_center_id = data_center_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2024NetworkController):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2024NetworkController):
            return True

        return self.to_dict() != other.to_dict()
