<?php
/**
 * InlineResponse2007EmbeddedEndpointList
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * untitled API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5170
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineResponse2007EmbeddedEndpointList Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse2007EmbeddedEndpointList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_7__embedded_endpointList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mfa_enabled' => 'bool',
        'deleted_at' => 'AnyType',
        'network_id' => 'string',
        'name' => 'string',
        'updated_at' => 'string',
        'sync_id' => 'AnyType',
        'session_identity_id' => 'AnyType',
        'os_release' => 'AnyType',
        'sync_resource_id' => 'AnyType',
        'ziti_id' => 'string',
        'app_version' => 'AnyType',
        'branch' => 'AnyType',
        'os' => 'AnyType',
        'owner_identity_id' => 'string',
        'has_edge_router_connection' => 'bool',
        'attributes' => 'string[]',
        'has_api_session' => 'bool',
        'revision' => 'AnyType',
        'version' => 'AnyType',
        'jwt' => 'AnyType',
        'id' => 'string',
        'session_active' => 'bool',
        'jwt_expires_at' => 'AnyType',
        'created_at' => 'string',
        'arch' => 'AnyType',
        'created_by' => 'string',
        'deleted_by' => 'AnyType',
        'type' => 'AnyType',
        'os_version' => 'AnyType',
        'app_id' => 'AnyType',
        '_links' => '\OpenAPI\Client\Model\InlineResponse200Links'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'mfa_enabled' => null,
        'deleted_at' => null,
        'network_id' => null,
        'name' => null,
        'updated_at' => null,
        'sync_id' => null,
        'session_identity_id' => null,
        'os_release' => null,
        'sync_resource_id' => null,
        'ziti_id' => null,
        'app_version' => null,
        'branch' => null,
        'os' => null,
        'owner_identity_id' => null,
        'has_edge_router_connection' => null,
        'attributes' => null,
        'has_api_session' => null,
        'revision' => null,
        'version' => null,
        'jwt' => null,
        'id' => null,
        'session_active' => null,
        'jwt_expires_at' => null,
        'created_at' => null,
        'arch' => null,
        'created_by' => null,
        'deleted_by' => null,
        'type' => null,
        'os_version' => null,
        'app_id' => null,
        '_links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mfa_enabled' => 'mfaEnabled',
        'deleted_at' => 'deletedAt',
        'network_id' => 'networkId',
        'name' => 'name',
        'updated_at' => 'updatedAt',
        'sync_id' => 'syncId',
        'session_identity_id' => 'sessionIdentityId',
        'os_release' => 'osRelease',
        'sync_resource_id' => 'syncResourceId',
        'ziti_id' => 'zitiId',
        'app_version' => 'appVersion',
        'branch' => 'branch',
        'os' => 'os',
        'owner_identity_id' => 'ownerIdentityId',
        'has_edge_router_connection' => 'hasEdgeRouterConnection',
        'attributes' => 'attributes',
        'has_api_session' => 'hasApiSession',
        'revision' => 'revision',
        'version' => 'version',
        'jwt' => 'jwt',
        'id' => 'id',
        'session_active' => 'sessionActive',
        'jwt_expires_at' => 'jwtExpiresAt',
        'created_at' => 'createdAt',
        'arch' => 'arch',
        'created_by' => 'createdBy',
        'deleted_by' => 'deletedBy',
        'type' => 'type',
        'os_version' => 'osVersion',
        'app_id' => 'appId',
        '_links' => '_links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mfa_enabled' => 'setMfaEnabled',
        'deleted_at' => 'setDeletedAt',
        'network_id' => 'setNetworkId',
        'name' => 'setName',
        'updated_at' => 'setUpdatedAt',
        'sync_id' => 'setSyncId',
        'session_identity_id' => 'setSessionIdentityId',
        'os_release' => 'setOsRelease',
        'sync_resource_id' => 'setSyncResourceId',
        'ziti_id' => 'setZitiId',
        'app_version' => 'setAppVersion',
        'branch' => 'setBranch',
        'os' => 'setOs',
        'owner_identity_id' => 'setOwnerIdentityId',
        'has_edge_router_connection' => 'setHasEdgeRouterConnection',
        'attributes' => 'setAttributes',
        'has_api_session' => 'setHasApiSession',
        'revision' => 'setRevision',
        'version' => 'setVersion',
        'jwt' => 'setJwt',
        'id' => 'setId',
        'session_active' => 'setSessionActive',
        'jwt_expires_at' => 'setJwtExpiresAt',
        'created_at' => 'setCreatedAt',
        'arch' => 'setArch',
        'created_by' => 'setCreatedBy',
        'deleted_by' => 'setDeletedBy',
        'type' => 'setType',
        'os_version' => 'setOsVersion',
        'app_id' => 'setAppId',
        '_links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mfa_enabled' => 'getMfaEnabled',
        'deleted_at' => 'getDeletedAt',
        'network_id' => 'getNetworkId',
        'name' => 'getName',
        'updated_at' => 'getUpdatedAt',
        'sync_id' => 'getSyncId',
        'session_identity_id' => 'getSessionIdentityId',
        'os_release' => 'getOsRelease',
        'sync_resource_id' => 'getSyncResourceId',
        'ziti_id' => 'getZitiId',
        'app_version' => 'getAppVersion',
        'branch' => 'getBranch',
        'os' => 'getOs',
        'owner_identity_id' => 'getOwnerIdentityId',
        'has_edge_router_connection' => 'getHasEdgeRouterConnection',
        'attributes' => 'getAttributes',
        'has_api_session' => 'getHasApiSession',
        'revision' => 'getRevision',
        'version' => 'getVersion',
        'jwt' => 'getJwt',
        'id' => 'getId',
        'session_active' => 'getSessionActive',
        'jwt_expires_at' => 'getJwtExpiresAt',
        'created_at' => 'getCreatedAt',
        'arch' => 'getArch',
        'created_by' => 'getCreatedBy',
        'deleted_by' => 'getDeletedBy',
        'type' => 'getType',
        'os_version' => 'getOsVersion',
        'app_id' => 'getAppId',
        '_links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mfa_enabled'] = isset($data['mfa_enabled']) ? $data['mfa_enabled'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['network_id'] = isset($data['network_id']) ? $data['network_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['sync_id'] = isset($data['sync_id']) ? $data['sync_id'] : null;
        $this->container['session_identity_id'] = isset($data['session_identity_id']) ? $data['session_identity_id'] : null;
        $this->container['os_release'] = isset($data['os_release']) ? $data['os_release'] : null;
        $this->container['sync_resource_id'] = isset($data['sync_resource_id']) ? $data['sync_resource_id'] : null;
        $this->container['ziti_id'] = isset($data['ziti_id']) ? $data['ziti_id'] : null;
        $this->container['app_version'] = isset($data['app_version']) ? $data['app_version'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['os'] = isset($data['os']) ? $data['os'] : null;
        $this->container['owner_identity_id'] = isset($data['owner_identity_id']) ? $data['owner_identity_id'] : null;
        $this->container['has_edge_router_connection'] = isset($data['has_edge_router_connection']) ? $data['has_edge_router_connection'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['has_api_session'] = isset($data['has_api_session']) ? $data['has_api_session'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['jwt'] = isset($data['jwt']) ? $data['jwt'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['session_active'] = isset($data['session_active']) ? $data['session_active'] : null;
        $this->container['jwt_expires_at'] = isset($data['jwt_expires_at']) ? $data['jwt_expires_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['arch'] = isset($data['arch']) ? $data['arch'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['deleted_by'] = isset($data['deleted_by']) ? $data['deleted_by'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['os_version'] = isset($data['os_version']) ? $data['os_version'] : null;
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['_links'] = isset($data['_links']) ? $data['_links'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['mfa_enabled'] === null) {
            $invalidProperties[] = "'mfa_enabled' can't be null";
        }
        if ($this->container['deleted_at'] === null) {
            $invalidProperties[] = "'deleted_at' can't be null";
        }
        if ($this->container['network_id'] === null) {
            $invalidProperties[] = "'network_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['sync_id'] === null) {
            $invalidProperties[] = "'sync_id' can't be null";
        }
        if ($this->container['session_identity_id'] === null) {
            $invalidProperties[] = "'session_identity_id' can't be null";
        }
        if ($this->container['os_release'] === null) {
            $invalidProperties[] = "'os_release' can't be null";
        }
        if ($this->container['sync_resource_id'] === null) {
            $invalidProperties[] = "'sync_resource_id' can't be null";
        }
        if ($this->container['ziti_id'] === null) {
            $invalidProperties[] = "'ziti_id' can't be null";
        }
        if ($this->container['app_version'] === null) {
            $invalidProperties[] = "'app_version' can't be null";
        }
        if ($this->container['branch'] === null) {
            $invalidProperties[] = "'branch' can't be null";
        }
        if ($this->container['os'] === null) {
            $invalidProperties[] = "'os' can't be null";
        }
        if ($this->container['owner_identity_id'] === null) {
            $invalidProperties[] = "'owner_identity_id' can't be null";
        }
        if ($this->container['has_edge_router_connection'] === null) {
            $invalidProperties[] = "'has_edge_router_connection' can't be null";
        }
        if ($this->container['attributes'] === null) {
            $invalidProperties[] = "'attributes' can't be null";
        }
        if ($this->container['has_api_session'] === null) {
            $invalidProperties[] = "'has_api_session' can't be null";
        }
        if ($this->container['revision'] === null) {
            $invalidProperties[] = "'revision' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['jwt'] === null) {
            $invalidProperties[] = "'jwt' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['session_active'] === null) {
            $invalidProperties[] = "'session_active' can't be null";
        }
        if ($this->container['jwt_expires_at'] === null) {
            $invalidProperties[] = "'jwt_expires_at' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['arch'] === null) {
            $invalidProperties[] = "'arch' can't be null";
        }
        if ($this->container['created_by'] === null) {
            $invalidProperties[] = "'created_by' can't be null";
        }
        if ($this->container['deleted_by'] === null) {
            $invalidProperties[] = "'deleted_by' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['os_version'] === null) {
            $invalidProperties[] = "'os_version' can't be null";
        }
        if ($this->container['app_id'] === null) {
            $invalidProperties[] = "'app_id' can't be null";
        }
        if ($this->container['_links'] === null) {
            $invalidProperties[] = "'_links' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mfa_enabled
     *
     * @return bool
     */
    public function getMfaEnabled()
    {
        return $this->container['mfa_enabled'];
    }

    /**
     * Sets mfa_enabled
     *
     * @param bool $mfa_enabled mfa_enabled
     *
     * @return $this
     */
    public function setMfaEnabled($mfa_enabled)
    {
        $this->container['mfa_enabled'] = $mfa_enabled;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return AnyType
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param AnyType $deleted_at deleted_at
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return string
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param string $network_id network_id
     *
     * @return $this
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets sync_id
     *
     * @return AnyType
     */
    public function getSyncId()
    {
        return $this->container['sync_id'];
    }

    /**
     * Sets sync_id
     *
     * @param AnyType $sync_id sync_id
     *
     * @return $this
     */
    public function setSyncId($sync_id)
    {
        $this->container['sync_id'] = $sync_id;

        return $this;
    }

    /**
     * Gets session_identity_id
     *
     * @return AnyType
     */
    public function getSessionIdentityId()
    {
        return $this->container['session_identity_id'];
    }

    /**
     * Sets session_identity_id
     *
     * @param AnyType $session_identity_id session_identity_id
     *
     * @return $this
     */
    public function setSessionIdentityId($session_identity_id)
    {
        $this->container['session_identity_id'] = $session_identity_id;

        return $this;
    }

    /**
     * Gets os_release
     *
     * @return AnyType
     */
    public function getOsRelease()
    {
        return $this->container['os_release'];
    }

    /**
     * Sets os_release
     *
     * @param AnyType $os_release os_release
     *
     * @return $this
     */
    public function setOsRelease($os_release)
    {
        $this->container['os_release'] = $os_release;

        return $this;
    }

    /**
     * Gets sync_resource_id
     *
     * @return AnyType
     */
    public function getSyncResourceId()
    {
        return $this->container['sync_resource_id'];
    }

    /**
     * Sets sync_resource_id
     *
     * @param AnyType $sync_resource_id sync_resource_id
     *
     * @return $this
     */
    public function setSyncResourceId($sync_resource_id)
    {
        $this->container['sync_resource_id'] = $sync_resource_id;

        return $this;
    }

    /**
     * Gets ziti_id
     *
     * @return string
     */
    public function getZitiId()
    {
        return $this->container['ziti_id'];
    }

    /**
     * Sets ziti_id
     *
     * @param string $ziti_id ziti_id
     *
     * @return $this
     */
    public function setZitiId($ziti_id)
    {
        $this->container['ziti_id'] = $ziti_id;

        return $this;
    }

    /**
     * Gets app_version
     *
     * @return AnyType
     */
    public function getAppVersion()
    {
        return $this->container['app_version'];
    }

    /**
     * Sets app_version
     *
     * @param AnyType $app_version app_version
     *
     * @return $this
     */
    public function setAppVersion($app_version)
    {
        $this->container['app_version'] = $app_version;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return AnyType
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param AnyType $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets os
     *
     * @return AnyType
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param AnyType $os os
     *
     * @return $this
     */
    public function setOs($os)
    {
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets owner_identity_id
     *
     * @return string
     */
    public function getOwnerIdentityId()
    {
        return $this->container['owner_identity_id'];
    }

    /**
     * Sets owner_identity_id
     *
     * @param string $owner_identity_id owner_identity_id
     *
     * @return $this
     */
    public function setOwnerIdentityId($owner_identity_id)
    {
        $this->container['owner_identity_id'] = $owner_identity_id;

        return $this;
    }

    /**
     * Gets has_edge_router_connection
     *
     * @return bool
     */
    public function getHasEdgeRouterConnection()
    {
        return $this->container['has_edge_router_connection'];
    }

    /**
     * Sets has_edge_router_connection
     *
     * @param bool $has_edge_router_connection has_edge_router_connection
     *
     * @return $this
     */
    public function setHasEdgeRouterConnection($has_edge_router_connection)
    {
        $this->container['has_edge_router_connection'] = $has_edge_router_connection;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return string[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param string[] $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets has_api_session
     *
     * @return bool
     */
    public function getHasApiSession()
    {
        return $this->container['has_api_session'];
    }

    /**
     * Sets has_api_session
     *
     * @param bool $has_api_session has_api_session
     *
     * @return $this
     */
    public function setHasApiSession($has_api_session)
    {
        $this->container['has_api_session'] = $has_api_session;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return AnyType
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param AnyType $revision revision
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets version
     *
     * @return AnyType
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param AnyType $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets jwt
     *
     * @return AnyType
     */
    public function getJwt()
    {
        return $this->container['jwt'];
    }

    /**
     * Sets jwt
     *
     * @param AnyType $jwt jwt
     *
     * @return $this
     */
    public function setJwt($jwt)
    {
        $this->container['jwt'] = $jwt;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets session_active
     *
     * @return bool
     */
    public function getSessionActive()
    {
        return $this->container['session_active'];
    }

    /**
     * Sets session_active
     *
     * @param bool $session_active session_active
     *
     * @return $this
     */
    public function setSessionActive($session_active)
    {
        $this->container['session_active'] = $session_active;

        return $this;
    }

    /**
     * Gets jwt_expires_at
     *
     * @return AnyType
     */
    public function getJwtExpiresAt()
    {
        return $this->container['jwt_expires_at'];
    }

    /**
     * Sets jwt_expires_at
     *
     * @param AnyType $jwt_expires_at jwt_expires_at
     *
     * @return $this
     */
    public function setJwtExpiresAt($jwt_expires_at)
    {
        $this->container['jwt_expires_at'] = $jwt_expires_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets arch
     *
     * @return AnyType
     */
    public function getArch()
    {
        return $this->container['arch'];
    }

    /**
     * Sets arch
     *
     * @param AnyType $arch arch
     *
     * @return $this
     */
    public function setArch($arch)
    {
        $this->container['arch'] = $arch;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets deleted_by
     *
     * @return AnyType
     */
    public function getDeletedBy()
    {
        return $this->container['deleted_by'];
    }

    /**
     * Sets deleted_by
     *
     * @param AnyType $deleted_by deleted_by
     *
     * @return $this
     */
    public function setDeletedBy($deleted_by)
    {
        $this->container['deleted_by'] = $deleted_by;

        return $this;
    }

    /**
     * Gets type
     *
     * @return AnyType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param AnyType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets os_version
     *
     * @return AnyType
     */
    public function getOsVersion()
    {
        return $this->container['os_version'];
    }

    /**
     * Sets os_version
     *
     * @param AnyType $os_version os_version
     *
     * @return $this
     */
    public function setOsVersion($os_version)
    {
        $this->container['os_version'] = $os_version;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return AnyType
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param AnyType $app_id app_id
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets _links
     *
     * @return \OpenAPI\Client\Model\InlineResponse200Links
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     *
     * @param \OpenAPI\Client\Model\InlineResponse200Links $_links _links
     *
     * @return $this
     */
    public function setLinks($_links)
    {
        $this->container['_links'] = $_links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


