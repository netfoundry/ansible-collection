<?php
/**
 * InlineResponse2021
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * untitled API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 5170
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineResponse2021 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse2021 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_202_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'deleted_at' => 'AnyType',
        'network_id' => 'string',
        'name' => 'string',
        'updated_at' => 'string',
        'model' => '\OpenAPI\Client\Model\InlineResponse2003EmbeddedModel',
        'ziti_id' => 'AnyType',
        'owner_identity_id' => 'string',
        'attributes' => 'string[]',
        'model_type' => 'string',
        'id' => 'string',
        'config_id_by_config_type_id' => '\OpenAPI\Client\Model\InlineResponse2021ConfigIdByConfigTypeId',
        'created_at' => 'string',
        'created_by' => 'string',
        'deleted_by' => 'AnyType',
        'encryption_required' => 'bool',
        'authority' => 'AnyType',
        '_links' => '\OpenAPI\Client\Model\InlineResponse2021Links'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'deleted_at' => null,
        'network_id' => null,
        'name' => null,
        'updated_at' => null,
        'model' => null,
        'ziti_id' => null,
        'owner_identity_id' => null,
        'attributes' => null,
        'model_type' => null,
        'id' => null,
        'config_id_by_config_type_id' => null,
        'created_at' => null,
        'created_by' => null,
        'deleted_by' => null,
        'encryption_required' => null,
        'authority' => null,
        '_links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deleted_at' => 'deletedAt',
        'network_id' => 'networkId',
        'name' => 'name',
        'updated_at' => 'updatedAt',
        'model' => 'model',
        'ziti_id' => 'zitiId',
        'owner_identity_id' => 'ownerIdentityId',
        'attributes' => 'attributes',
        'model_type' => 'modelType',
        'id' => 'id',
        'config_id_by_config_type_id' => 'configIdByConfigTypeId',
        'created_at' => 'createdAt',
        'created_by' => 'createdBy',
        'deleted_by' => 'deletedBy',
        'encryption_required' => 'encryptionRequired',
        'authority' => 'authority',
        '_links' => '_links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deleted_at' => 'setDeletedAt',
        'network_id' => 'setNetworkId',
        'name' => 'setName',
        'updated_at' => 'setUpdatedAt',
        'model' => 'setModel',
        'ziti_id' => 'setZitiId',
        'owner_identity_id' => 'setOwnerIdentityId',
        'attributes' => 'setAttributes',
        'model_type' => 'setModelType',
        'id' => 'setId',
        'config_id_by_config_type_id' => 'setConfigIdByConfigTypeId',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'deleted_by' => 'setDeletedBy',
        'encryption_required' => 'setEncryptionRequired',
        'authority' => 'setAuthority',
        '_links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deleted_at' => 'getDeletedAt',
        'network_id' => 'getNetworkId',
        'name' => 'getName',
        'updated_at' => 'getUpdatedAt',
        'model' => 'getModel',
        'ziti_id' => 'getZitiId',
        'owner_identity_id' => 'getOwnerIdentityId',
        'attributes' => 'getAttributes',
        'model_type' => 'getModelType',
        'id' => 'getId',
        'config_id_by_config_type_id' => 'getConfigIdByConfigTypeId',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'deleted_by' => 'getDeletedBy',
        'encryption_required' => 'getEncryptionRequired',
        'authority' => 'getAuthority',
        '_links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['network_id'] = isset($data['network_id']) ? $data['network_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['ziti_id'] = isset($data['ziti_id']) ? $data['ziti_id'] : null;
        $this->container['owner_identity_id'] = isset($data['owner_identity_id']) ? $data['owner_identity_id'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['model_type'] = isset($data['model_type']) ? $data['model_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['config_id_by_config_type_id'] = isset($data['config_id_by_config_type_id']) ? $data['config_id_by_config_type_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['deleted_by'] = isset($data['deleted_by']) ? $data['deleted_by'] : null;
        $this->container['encryption_required'] = isset($data['encryption_required']) ? $data['encryption_required'] : null;
        $this->container['authority'] = isset($data['authority']) ? $data['authority'] : null;
        $this->container['_links'] = isset($data['_links']) ? $data['_links'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['deleted_at'] === null) {
            $invalidProperties[] = "'deleted_at' can't be null";
        }
        if ($this->container['network_id'] === null) {
            $invalidProperties[] = "'network_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if ($this->container['ziti_id'] === null) {
            $invalidProperties[] = "'ziti_id' can't be null";
        }
        if ($this->container['owner_identity_id'] === null) {
            $invalidProperties[] = "'owner_identity_id' can't be null";
        }
        if ($this->container['attributes'] === null) {
            $invalidProperties[] = "'attributes' can't be null";
        }
        if ($this->container['model_type'] === null) {
            $invalidProperties[] = "'model_type' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['config_id_by_config_type_id'] === null) {
            $invalidProperties[] = "'config_id_by_config_type_id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['created_by'] === null) {
            $invalidProperties[] = "'created_by' can't be null";
        }
        if ($this->container['deleted_by'] === null) {
            $invalidProperties[] = "'deleted_by' can't be null";
        }
        if ($this->container['encryption_required'] === null) {
            $invalidProperties[] = "'encryption_required' can't be null";
        }
        if ($this->container['authority'] === null) {
            $invalidProperties[] = "'authority' can't be null";
        }
        if ($this->container['_links'] === null) {
            $invalidProperties[] = "'_links' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deleted_at
     *
     * @return AnyType
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param AnyType $deleted_at deleted_at
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return string
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param string $network_id network_id
     *
     * @return $this
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets model
     *
     * @return \OpenAPI\Client\Model\InlineResponse2003EmbeddedModel
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \OpenAPI\Client\Model\InlineResponse2003EmbeddedModel $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets ziti_id
     *
     * @return AnyType
     */
    public function getZitiId()
    {
        return $this->container['ziti_id'];
    }

    /**
     * Sets ziti_id
     *
     * @param AnyType $ziti_id ziti_id
     *
     * @return $this
     */
    public function setZitiId($ziti_id)
    {
        $this->container['ziti_id'] = $ziti_id;

        return $this;
    }

    /**
     * Gets owner_identity_id
     *
     * @return string
     */
    public function getOwnerIdentityId()
    {
        return $this->container['owner_identity_id'];
    }

    /**
     * Sets owner_identity_id
     *
     * @param string $owner_identity_id owner_identity_id
     *
     * @return $this
     */
    public function setOwnerIdentityId($owner_identity_id)
    {
        $this->container['owner_identity_id'] = $owner_identity_id;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return string[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param string[] $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets model_type
     *
     * @return string
     */
    public function getModelType()
    {
        return $this->container['model_type'];
    }

    /**
     * Sets model_type
     *
     * @param string $model_type model_type
     *
     * @return $this
     */
    public function setModelType($model_type)
    {
        $this->container['model_type'] = $model_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets config_id_by_config_type_id
     *
     * @return \OpenAPI\Client\Model\InlineResponse2021ConfigIdByConfigTypeId
     */
    public function getConfigIdByConfigTypeId()
    {
        return $this->container['config_id_by_config_type_id'];
    }

    /**
     * Sets config_id_by_config_type_id
     *
     * @param \OpenAPI\Client\Model\InlineResponse2021ConfigIdByConfigTypeId $config_id_by_config_type_id config_id_by_config_type_id
     *
     * @return $this
     */
    public function setConfigIdByConfigTypeId($config_id_by_config_type_id)
    {
        $this->container['config_id_by_config_type_id'] = $config_id_by_config_type_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets deleted_by
     *
     * @return AnyType
     */
    public function getDeletedBy()
    {
        return $this->container['deleted_by'];
    }

    /**
     * Sets deleted_by
     *
     * @param AnyType $deleted_by deleted_by
     *
     * @return $this
     */
    public function setDeletedBy($deleted_by)
    {
        $this->container['deleted_by'] = $deleted_by;

        return $this;
    }

    /**
     * Gets encryption_required
     *
     * @return bool
     */
    public function getEncryptionRequired()
    {
        return $this->container['encryption_required'];
    }

    /**
     * Sets encryption_required
     *
     * @param bool $encryption_required encryption_required
     *
     * @return $this
     */
    public function setEncryptionRequired($encryption_required)
    {
        $this->container['encryption_required'] = $encryption_required;

        return $this;
    }

    /**
     * Gets authority
     *
     * @return AnyType
     */
    public function getAuthority()
    {
        return $this->container['authority'];
    }

    /**
     * Sets authority
     *
     * @param AnyType $authority authority
     *
     * @return $this
     */
    public function setAuthority($authority)
    {
        $this->container['authority'] = $authority;

        return $this;
    }

    /**
     * Gets _links
     *
     * @return \OpenAPI\Client\Model\InlineResponse2021Links
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     *
     * @param \OpenAPI\Client\Model\InlineResponse2021Links $_links _links
     *
     * @return $this
     */
    public function setLinks($_links)
    {
        $this->container['_links'] = $_links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


